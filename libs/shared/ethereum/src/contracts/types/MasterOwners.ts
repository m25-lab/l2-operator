/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace MasterOwners {
  export type TransactionStruct = {
    submitter: PromiseOrValue<string>;
    target: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
    note: PromiseOrValue<string>;
    reason: PromiseOrValue<string>;
    deadline: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type TransactionStructOutput = [
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    number
  ] & {
    submitter: string;
    target: string;
    data: string;
    note: string;
    reason: string;
    deadline: BigNumber;
    status: number;
  };
}

export interface MasterOwnersInterface extends utils.Interface {
  functions: {
    "addOwner(address)": FunctionFragment;
    "cancelTransaction(uint256,string)": FunctionFragment;
    "changeDefaultDeadline(uint256)": FunctionFragment;
    "currentTransactionId()": FunctionFragment;
    "defaultDeadline()": FunctionFragment;
    "executeTransaction(uint256)": FunctionFragment;
    "forceExecuteTransaction(uint256)": FunctionFragment;
    "getCancelTxByIndex(uint256)": FunctionFragment;
    "getExecutedTxByIndex(uint256)": FunctionFragment;
    "getFailedTxByIndex(uint256)": FunctionFragment;
    "getPendingTxByIndex(uint256)": FunctionFragment;
    "getTx(uint256)": FunctionFragment;
    "initialize()": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "masterOwner()": FunctionFragment;
    "ownerByIndex(uint256)": FunctionFragment;
    "removeOwner(address)": FunctionFragment;
    "renounceMasterOwnership()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safu(address)": FunctionFragment;
    "submitTransaction(address,bytes,uint256,string)": FunctionFragment;
    "totalCancelTxs()": FunctionFragment;
    "totalExecutedTxs()": FunctionFragment;
    "totalFailedTxs()": FunctionFragment;
    "totalOwner()": FunctionFragment;
    "totalPendingTxs()": FunctionFragment;
    "transferMasterOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addOwner"
      | "cancelTransaction"
      | "changeDefaultDeadline"
      | "currentTransactionId"
      | "defaultDeadline"
      | "executeTransaction"
      | "forceExecuteTransaction"
      | "getCancelTxByIndex"
      | "getExecutedTxByIndex"
      | "getFailedTxByIndex"
      | "getPendingTxByIndex"
      | "getTx"
      | "initialize"
      | "isOwner"
      | "masterOwner"
      | "ownerByIndex"
      | "removeOwner"
      | "renounceMasterOwnership"
      | "renounceOwnership"
      | "safu"
      | "submitTransaction"
      | "totalCancelTxs"
      | "totalExecutedTxs"
      | "totalFailedTxs"
      | "totalOwner"
      | "totalPendingTxs"
      | "transferMasterOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTransaction",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeDefaultDeadline",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentTransactionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultDeadline",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "forceExecuteTransaction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCancelTxByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutedTxByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFailedTxByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingTxByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTx",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "masterOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceMasterOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safu",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTransaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCancelTxs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalExecutedTxs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFailedTxs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPendingTxs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferMasterOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "addOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeDefaultDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentTransactionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceExecuteTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCancelTxByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutedTxByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFailedTxByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingTxByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceMasterOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "safu", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCancelTxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalExecutedTxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFailedTxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalPendingTxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferMasterOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CancelTransaction(uint256)": EventFragment;
    "ExecuteTransaction(uint256)": EventFragment;
    "FailTransaction(uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MasterOwnershipTransferred(address,address)": EventFragment;
    "RenounceMasterOwnership(address)": EventFragment;
    "RenounceOwnership(address)": EventFragment;
    "RevokeOwner(address)": EventFragment;
    "Safu()": EventFragment;
    "SetOwner(address)": EventFragment;
    "SubmitTransaction(uint256,address,bytes,uint256,string)": EventFragment;
    "UpdateDefaultDeadline(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FailTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MasterOwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RenounceMasterOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RenounceOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Safu"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateDefaultDeadline"): EventFragment;
}

export interface CancelTransactionEventObject {
  id: BigNumber;
}
export type CancelTransactionEvent = TypedEvent<
  [BigNumber],
  CancelTransactionEventObject
>;

export type CancelTransactionEventFilter =
  TypedEventFilter<CancelTransactionEvent>;

export interface ExecuteTransactionEventObject {
  id: BigNumber;
}
export type ExecuteTransactionEvent = TypedEvent<
  [BigNumber],
  ExecuteTransactionEventObject
>;

export type ExecuteTransactionEventFilter =
  TypedEventFilter<ExecuteTransactionEvent>;

export interface FailTransactionEventObject {
  id: BigNumber;
}
export type FailTransactionEvent = TypedEvent<
  [BigNumber],
  FailTransactionEventObject
>;

export type FailTransactionEventFilter = TypedEventFilter<FailTransactionEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MasterOwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type MasterOwnershipTransferredEvent = TypedEvent<
  [string, string],
  MasterOwnershipTransferredEventObject
>;

export type MasterOwnershipTransferredEventFilter =
  TypedEventFilter<MasterOwnershipTransferredEvent>;

export interface RenounceMasterOwnershipEventObject {
  owner: string;
}
export type RenounceMasterOwnershipEvent = TypedEvent<
  [string],
  RenounceMasterOwnershipEventObject
>;

export type RenounceMasterOwnershipEventFilter =
  TypedEventFilter<RenounceMasterOwnershipEvent>;

export interface RenounceOwnershipEventObject {
  owner: string;
}
export type RenounceOwnershipEvent = TypedEvent<
  [string],
  RenounceOwnershipEventObject
>;

export type RenounceOwnershipEventFilter =
  TypedEventFilter<RenounceOwnershipEvent>;

export interface RevokeOwnerEventObject {
  owner: string;
}
export type RevokeOwnerEvent = TypedEvent<[string], RevokeOwnerEventObject>;

export type RevokeOwnerEventFilter = TypedEventFilter<RevokeOwnerEvent>;

export interface SafuEventObject {}
export type SafuEvent = TypedEvent<[], SafuEventObject>;

export type SafuEventFilter = TypedEventFilter<SafuEvent>;

export interface SetOwnerEventObject {
  newOwner: string;
}
export type SetOwnerEvent = TypedEvent<[string], SetOwnerEventObject>;

export type SetOwnerEventFilter = TypedEventFilter<SetOwnerEvent>;

export interface SubmitTransactionEventObject {
  id: BigNumber;
  target: string;
  data: string;
  deadline: BigNumber;
  note: string;
}
export type SubmitTransactionEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string],
  SubmitTransactionEventObject
>;

export type SubmitTransactionEventFilter =
  TypedEventFilter<SubmitTransactionEvent>;

export interface UpdateDefaultDeadlineEventObject {
  _DefaultDeadline: BigNumber;
}
export type UpdateDefaultDeadlineEvent = TypedEvent<
  [BigNumber],
  UpdateDefaultDeadlineEventObject
>;

export type UpdateDefaultDeadlineEventFilter =
  TypedEventFilter<UpdateDefaultDeadlineEvent>;

export interface MasterOwners extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MasterOwnersInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelTransaction(
      _id: PromiseOrValue<BigNumberish>,
      _reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeDefaultDeadline(
      _newDefaultDeadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentTransactionId(overrides?: CallOverrides): Promise<[BigNumber]>;

    defaultDeadline(overrides?: CallOverrides): Promise<[BigNumber]>;

    executeTransaction(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    forceExecuteTransaction(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCancelTxByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, MasterOwners.TransactionStructOutput] & { txId: BigNumber }
    >;

    getExecutedTxByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, MasterOwners.TransactionStructOutput] & { txId: BigNumber }
    >;

    getFailedTxByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, MasterOwners.TransactionStructOutput] & { txId: BigNumber }
    >;

    getPendingTxByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, MasterOwners.TransactionStructOutput] & { txId: BigNumber }
    >;

    getTx(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[MasterOwners.TransactionStructOutput]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isOwner(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    masterOwner(overrides?: CallOverrides): Promise<[string]>;

    ownerByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceMasterOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safu(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitTransaction(
      _target: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _deadline: PromiseOrValue<BigNumberish>,
      _note: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalCancelTxs(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalExecutedTxs(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalFailedTxs(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalOwner(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPendingTxs(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferMasterOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelTransaction(
    _id: PromiseOrValue<BigNumberish>,
    _reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeDefaultDeadline(
    _newDefaultDeadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentTransactionId(overrides?: CallOverrides): Promise<BigNumber>;

  defaultDeadline(overrides?: CallOverrides): Promise<BigNumber>;

  executeTransaction(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  forceExecuteTransaction(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCancelTxByIndex(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, MasterOwners.TransactionStructOutput] & { txId: BigNumber }
  >;

  getExecutedTxByIndex(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, MasterOwners.TransactionStructOutput] & { txId: BigNumber }
  >;

  getFailedTxByIndex(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, MasterOwners.TransactionStructOutput] & { txId: BigNumber }
  >;

  getPendingTxByIndex(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, MasterOwners.TransactionStructOutput] & { txId: BigNumber }
  >;

  getTx(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<MasterOwners.TransactionStructOutput>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isOwner(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  masterOwner(overrides?: CallOverrides): Promise<string>;

  ownerByIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  removeOwner(
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceMasterOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safu(
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitTransaction(
    _target: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    _deadline: PromiseOrValue<BigNumberish>,
    _note: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalCancelTxs(overrides?: CallOverrides): Promise<BigNumber>;

  totalExecutedTxs(overrides?: CallOverrides): Promise<BigNumber>;

  totalFailedTxs(overrides?: CallOverrides): Promise<BigNumber>;

  totalOwner(overrides?: CallOverrides): Promise<BigNumber>;

  totalPendingTxs(overrides?: CallOverrides): Promise<BigNumber>;

  transferMasterOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelTransaction(
      _id: PromiseOrValue<BigNumberish>,
      _reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeDefaultDeadline(
      _newDefaultDeadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    currentTransactionId(overrides?: CallOverrides): Promise<BigNumber>;

    defaultDeadline(overrides?: CallOverrides): Promise<BigNumber>;

    executeTransaction(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    forceExecuteTransaction(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCancelTxByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, MasterOwners.TransactionStructOutput] & { txId: BigNumber }
    >;

    getExecutedTxByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, MasterOwners.TransactionStructOutput] & { txId: BigNumber }
    >;

    getFailedTxByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, MasterOwners.TransactionStructOutput] & { txId: BigNumber }
    >;

    getPendingTxByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, MasterOwners.TransactionStructOutput] & { txId: BigNumber }
    >;

    getTx(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MasterOwners.TransactionStructOutput>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isOwner(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    masterOwner(overrides?: CallOverrides): Promise<string>;

    ownerByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    removeOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceMasterOwnership(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    safu(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitTransaction(
      _target: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _deadline: PromiseOrValue<BigNumberish>,
      _note: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalCancelTxs(overrides?: CallOverrides): Promise<BigNumber>;

    totalExecutedTxs(overrides?: CallOverrides): Promise<BigNumber>;

    totalFailedTxs(overrides?: CallOverrides): Promise<BigNumber>;

    totalOwner(overrides?: CallOverrides): Promise<BigNumber>;

    totalPendingTxs(overrides?: CallOverrides): Promise<BigNumber>;

    transferMasterOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CancelTransaction(uint256)"(
      id?: PromiseOrValue<BigNumberish> | null
    ): CancelTransactionEventFilter;
    CancelTransaction(
      id?: PromiseOrValue<BigNumberish> | null
    ): CancelTransactionEventFilter;

    "ExecuteTransaction(uint256)"(
      id?: PromiseOrValue<BigNumberish> | null
    ): ExecuteTransactionEventFilter;
    ExecuteTransaction(
      id?: PromiseOrValue<BigNumberish> | null
    ): ExecuteTransactionEventFilter;

    "FailTransaction(uint256)"(
      id?: PromiseOrValue<BigNumberish> | null
    ): FailTransactionEventFilter;
    FailTransaction(
      id?: PromiseOrValue<BigNumberish> | null
    ): FailTransactionEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MasterOwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): MasterOwnershipTransferredEventFilter;
    MasterOwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): MasterOwnershipTransferredEventFilter;

    "RenounceMasterOwnership(address)"(
      owner?: PromiseOrValue<string> | null
    ): RenounceMasterOwnershipEventFilter;
    RenounceMasterOwnership(
      owner?: PromiseOrValue<string> | null
    ): RenounceMasterOwnershipEventFilter;

    "RenounceOwnership(address)"(
      owner?: PromiseOrValue<string> | null
    ): RenounceOwnershipEventFilter;
    RenounceOwnership(
      owner?: PromiseOrValue<string> | null
    ): RenounceOwnershipEventFilter;

    "RevokeOwner(address)"(
      owner?: PromiseOrValue<string> | null
    ): RevokeOwnerEventFilter;
    RevokeOwner(owner?: PromiseOrValue<string> | null): RevokeOwnerEventFilter;

    "Safu()"(): SafuEventFilter;
    Safu(): SafuEventFilter;

    "SetOwner(address)"(
      newOwner?: PromiseOrValue<string> | null
    ): SetOwnerEventFilter;
    SetOwner(newOwner?: PromiseOrValue<string> | null): SetOwnerEventFilter;

    "SubmitTransaction(uint256,address,bytes,uint256,string)"(
      id?: PromiseOrValue<BigNumberish> | null,
      target?: null,
      data?: null,
      deadline?: null,
      note?: null
    ): SubmitTransactionEventFilter;
    SubmitTransaction(
      id?: PromiseOrValue<BigNumberish> | null,
      target?: null,
      data?: null,
      deadline?: null,
      note?: null
    ): SubmitTransactionEventFilter;

    "UpdateDefaultDeadline(uint256)"(
      _DefaultDeadline?: null
    ): UpdateDefaultDeadlineEventFilter;
    UpdateDefaultDeadline(
      _DefaultDeadline?: null
    ): UpdateDefaultDeadlineEventFilter;
  };

  estimateGas: {
    addOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelTransaction(
      _id: PromiseOrValue<BigNumberish>,
      _reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeDefaultDeadline(
      _newDefaultDeadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentTransactionId(overrides?: CallOverrides): Promise<BigNumber>;

    defaultDeadline(overrides?: CallOverrides): Promise<BigNumber>;

    executeTransaction(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    forceExecuteTransaction(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCancelTxByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExecutedTxByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFailedTxByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingTxByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTx(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isOwner(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    masterOwner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceMasterOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safu(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitTransaction(
      _target: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _deadline: PromiseOrValue<BigNumberish>,
      _note: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalCancelTxs(overrides?: CallOverrides): Promise<BigNumber>;

    totalExecutedTxs(overrides?: CallOverrides): Promise<BigNumber>;

    totalFailedTxs(overrides?: CallOverrides): Promise<BigNumber>;

    totalOwner(overrides?: CallOverrides): Promise<BigNumber>;

    totalPendingTxs(overrides?: CallOverrides): Promise<BigNumber>;

    transferMasterOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelTransaction(
      _id: PromiseOrValue<BigNumberish>,
      _reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeDefaultDeadline(
      _newDefaultDeadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentTransactionId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultDeadline(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeTransaction(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    forceExecuteTransaction(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCancelTxByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExecutedTxByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFailedTxByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingTxByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTx(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isOwner(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceMasterOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safu(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitTransaction(
      _target: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _deadline: PromiseOrValue<BigNumberish>,
      _note: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalCancelTxs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalExecutedTxs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalFailedTxs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPendingTxs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferMasterOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
