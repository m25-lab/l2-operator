/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace MultiSigExecute {
  export type TransactionStruct = {
    submitter: PromiseOrValue<string>;
    target: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
    confirmations: PromiseOrValue<BigNumberish>;
  };

  export type TransactionStructOutput = [string, string, string, BigNumber] & {
    submitter: string;
    target: string;
    data: string;
    confirmations: BigNumber;
  };
}

export interface MultiSigInterface extends utils.Interface {
  functions: {
    "addOwner(address)": FunctionFragment;
    "cancelTransaction(uint256)": FunctionFragment;
    "confirmTransaction(uint256)": FunctionFragment;
    "currentTransactionId()": FunctionFragment;
    "executeTransaction(uint256)": FunctionFragment;
    "getCancelTxByIndex(uint256)": FunctionFragment;
    "getExecutedTxByIndex(uint256)": FunctionFragment;
    "getOwnerByIndex(uint256)": FunctionFragment;
    "getPendingTxByIndex(uint256)": FunctionFragment;
    "isConfirmed(uint256,address)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "removeOwner(address)": FunctionFragment;
    "revokeTransaction(uint256)": FunctionFragment;
    "submitTransaction(address,bytes)": FunctionFragment;
    "totalCancelTxs()": FunctionFragment;
    "totalExecutedTxs()": FunctionFragment;
    "totalOwner()": FunctionFragment;
    "totalPendingTxs()": FunctionFragment;
    "transactions(uint256)": FunctionFragment;
    "updateWeight(uint256)": FunctionFragment;
    "weight()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addOwner"
      | "cancelTransaction"
      | "confirmTransaction"
      | "currentTransactionId"
      | "executeTransaction"
      | "getCancelTxByIndex"
      | "getExecutedTxByIndex"
      | "getOwnerByIndex"
      | "getPendingTxByIndex"
      | "isConfirmed"
      | "isOwner"
      | "removeOwner"
      | "revokeTransaction"
      | "submitTransaction"
      | "totalCancelTxs"
      | "totalExecutedTxs"
      | "totalOwner"
      | "totalPendingTxs"
      | "transactions"
      | "updateWeight"
      | "weight"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTransaction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmTransaction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentTransactionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCancelTxByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutedTxByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingTxByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isConfirmed",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeTransaction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTransaction",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCancelTxs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalExecutedTxs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPendingTxs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWeight",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "weight", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentTransactionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCancelTxByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutedTxByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingTxByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isConfirmed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCancelTxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalExecutedTxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalPendingTxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weight", data: BytesLike): Result;

  events: {
    "AddOwner(address)": EventFragment;
    "CancelTransaction(uint256)": EventFragment;
    "ConfirmTransaction(uint256)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "ExecuteTransaction(uint256)": EventFragment;
    "RevokeOwner(address)": EventFragment;
    "RevokeTransaction(uint256)": EventFragment;
    "SubmitTransaction(uint256,address,bytes)": EventFragment;
    "UpdateWeight(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfirmTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateWeight"): EventFragment;
}

export interface AddOwnerEventObject {
  _account: string;
}
export type AddOwnerEvent = TypedEvent<[string], AddOwnerEventObject>;

export type AddOwnerEventFilter = TypedEventFilter<AddOwnerEvent>;

export interface CancelTransactionEventObject {
  _id: BigNumber;
}
export type CancelTransactionEvent = TypedEvent<
  [BigNumber],
  CancelTransactionEventObject
>;

export type CancelTransactionEventFilter =
  TypedEventFilter<CancelTransactionEvent>;

export interface ConfirmTransactionEventObject {
  _id: BigNumber;
}
export type ConfirmTransactionEvent = TypedEvent<
  [BigNumber],
  ConfirmTransactionEventObject
>;

export type ConfirmTransactionEventFilter =
  TypedEventFilter<ConfirmTransactionEvent>;

export interface DepositEventObject {
  _sender: string;
  _amount: BigNumber;
  _balance: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface ExecuteTransactionEventObject {
  _id: BigNumber;
}
export type ExecuteTransactionEvent = TypedEvent<
  [BigNumber],
  ExecuteTransactionEventObject
>;

export type ExecuteTransactionEventFilter =
  TypedEventFilter<ExecuteTransactionEvent>;

export interface RevokeOwnerEventObject {
  _account: string;
}
export type RevokeOwnerEvent = TypedEvent<[string], RevokeOwnerEventObject>;

export type RevokeOwnerEventFilter = TypedEventFilter<RevokeOwnerEvent>;

export interface RevokeTransactionEventObject {
  _id: BigNumber;
}
export type RevokeTransactionEvent = TypedEvent<
  [BigNumber],
  RevokeTransactionEventObject
>;

export type RevokeTransactionEventFilter =
  TypedEventFilter<RevokeTransactionEvent>;

export interface SubmitTransactionEventObject {
  _id: BigNumber;
  _target: string;
  _data: string;
}
export type SubmitTransactionEvent = TypedEvent<
  [BigNumber, string, string],
  SubmitTransactionEventObject
>;

export type SubmitTransactionEventFilter =
  TypedEventFilter<SubmitTransactionEvent>;

export interface UpdateWeightEventObject {
  _newWeight: BigNumber;
}
export type UpdateWeightEvent = TypedEvent<
  [BigNumber],
  UpdateWeightEventObject
>;

export type UpdateWeightEventFilter = TypedEventFilter<UpdateWeightEvent>;

export interface MultiSig extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MultiSigInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addOwner(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelTransaction(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    confirmTransaction(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentTransactionId(overrides?: CallOverrides): Promise<[BigNumber]>;

    executeTransaction(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCancelTxByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, MultiSigExecute.TransactionStructOutput] & { txId: BigNumber }
    >;

    getExecutedTxByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, MultiSigExecute.TransactionStructOutput] & { txId: BigNumber }
    >;

    getOwnerByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPendingTxByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, MultiSigExecute.TransactionStructOutput] & { txId: BigNumber }
    >;

    isConfirmed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOwner(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeOwner(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeTransaction(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitTransaction(
      _target: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalCancelTxs(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalExecutedTxs(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalOwner(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPendingTxs(overrides?: CallOverrides): Promise<[BigNumber]>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        submitter: string;
        target: string;
        data: string;
        confirmations: BigNumber;
      }
    >;

    updateWeight(
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    weight(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addOwner(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelTransaction(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  confirmTransaction(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentTransactionId(overrides?: CallOverrides): Promise<BigNumber>;

  executeTransaction(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCancelTxByIndex(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, MultiSigExecute.TransactionStructOutput] & { txId: BigNumber }
  >;

  getExecutedTxByIndex(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, MultiSigExecute.TransactionStructOutput] & { txId: BigNumber }
  >;

  getOwnerByIndex(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPendingTxByIndex(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, MultiSigExecute.TransactionStructOutput] & { txId: BigNumber }
  >;

  isConfirmed(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOwner(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeOwner(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeTransaction(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitTransaction(
    _target: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalCancelTxs(overrides?: CallOverrides): Promise<BigNumber>;

  totalExecutedTxs(overrides?: CallOverrides): Promise<BigNumber>;

  totalOwner(overrides?: CallOverrides): Promise<BigNumber>;

  totalPendingTxs(overrides?: CallOverrides): Promise<BigNumber>;

  transactions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber] & {
      submitter: string;
      target: string;
      data: string;
      confirmations: BigNumber;
    }
  >;

  updateWeight(
    _weight: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  weight(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addOwner(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelTransaction(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    confirmTransaction(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    currentTransactionId(overrides?: CallOverrides): Promise<BigNumber>;

    executeTransaction(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCancelTxByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, MultiSigExecute.TransactionStructOutput] & { txId: BigNumber }
    >;

    getExecutedTxByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, MultiSigExecute.TransactionStructOutput] & { txId: BigNumber }
    >;

    getOwnerByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPendingTxByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, MultiSigExecute.TransactionStructOutput] & { txId: BigNumber }
    >;

    isConfirmed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwner(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeOwner(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeTransaction(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitTransaction(
      _target: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalCancelTxs(overrides?: CallOverrides): Promise<BigNumber>;

    totalExecutedTxs(overrides?: CallOverrides): Promise<BigNumber>;

    totalOwner(overrides?: CallOverrides): Promise<BigNumber>;

    totalPendingTxs(overrides?: CallOverrides): Promise<BigNumber>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        submitter: string;
        target: string;
        data: string;
        confirmations: BigNumber;
      }
    >;

    updateWeight(
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    weight(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AddOwner(address)"(
      _account?: PromiseOrValue<string> | null
    ): AddOwnerEventFilter;
    AddOwner(_account?: PromiseOrValue<string> | null): AddOwnerEventFilter;

    "CancelTransaction(uint256)"(
      _id?: PromiseOrValue<BigNumberish> | null
    ): CancelTransactionEventFilter;
    CancelTransaction(
      _id?: PromiseOrValue<BigNumberish> | null
    ): CancelTransactionEventFilter;

    "ConfirmTransaction(uint256)"(
      _id?: PromiseOrValue<BigNumberish> | null
    ): ConfirmTransactionEventFilter;
    ConfirmTransaction(
      _id?: PromiseOrValue<BigNumberish> | null
    ): ConfirmTransactionEventFilter;

    "Deposit(address,uint256,uint256)"(
      _sender?: PromiseOrValue<string> | null,
      _amount?: null,
      _balance?: null
    ): DepositEventFilter;
    Deposit(
      _sender?: PromiseOrValue<string> | null,
      _amount?: null,
      _balance?: null
    ): DepositEventFilter;

    "ExecuteTransaction(uint256)"(
      _id?: PromiseOrValue<BigNumberish> | null
    ): ExecuteTransactionEventFilter;
    ExecuteTransaction(
      _id?: PromiseOrValue<BigNumberish> | null
    ): ExecuteTransactionEventFilter;

    "RevokeOwner(address)"(
      _account?: PromiseOrValue<string> | null
    ): RevokeOwnerEventFilter;
    RevokeOwner(
      _account?: PromiseOrValue<string> | null
    ): RevokeOwnerEventFilter;

    "RevokeTransaction(uint256)"(
      _id?: PromiseOrValue<BigNumberish> | null
    ): RevokeTransactionEventFilter;
    RevokeTransaction(
      _id?: PromiseOrValue<BigNumberish> | null
    ): RevokeTransactionEventFilter;

    "SubmitTransaction(uint256,address,bytes)"(
      _id?: PromiseOrValue<BigNumberish> | null,
      _target?: null,
      _data?: null
    ): SubmitTransactionEventFilter;
    SubmitTransaction(
      _id?: PromiseOrValue<BigNumberish> | null,
      _target?: null,
      _data?: null
    ): SubmitTransactionEventFilter;

    "UpdateWeight(uint256)"(_newWeight?: null): UpdateWeightEventFilter;
    UpdateWeight(_newWeight?: null): UpdateWeightEventFilter;
  };

  estimateGas: {
    addOwner(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelTransaction(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    confirmTransaction(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentTransactionId(overrides?: CallOverrides): Promise<BigNumber>;

    executeTransaction(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCancelTxByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExecutedTxByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnerByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingTxByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isConfirmed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeOwner(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeTransaction(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitTransaction(
      _target: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalCancelTxs(overrides?: CallOverrides): Promise<BigNumber>;

    totalExecutedTxs(overrides?: CallOverrides): Promise<BigNumber>;

    totalOwner(overrides?: CallOverrides): Promise<BigNumber>;

    totalPendingTxs(overrides?: CallOverrides): Promise<BigNumber>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateWeight(
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    weight(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addOwner(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelTransaction(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    confirmTransaction(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentTransactionId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeTransaction(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCancelTxByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExecutedTxByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnerByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingTxByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isConfirmed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeOwner(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeTransaction(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitTransaction(
      _target: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalCancelTxs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalExecutedTxs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPendingTxs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateWeight(
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    weight(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
