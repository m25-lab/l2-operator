/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export interface BooPrivateInterface extends utils.Interface {
  functions: {
    'acceptMappingAddress(address)': FunctionFragment
    'addBridge(address)': FunctionFragment
    'addOwner(address)': FunctionFragment
    'allowance(address,address)': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'balanceOfAt(address,uint256)': FunctionFragment
    'bridgeIn(address,bytes32)': FunctionFragment
    'bridgeOut(address,uint256)': FunctionFragment
    'bridgeTokens(address)': FunctionFragment
    'burn(uint256)': FunctionFragment
    'cancelPendingMapping()': FunctionFragment
    'countMappedAddresses(address)': FunctionFragment
    'countPendingRequestMapping(address)': FunctionFragment
    'decimals()': FunctionFragment
    'decreaseAllowance(address,uint256)': FunctionFragment
    'getCurrentRequestMapping(address)': FunctionFragment
    'getCurrentSnapshotId()': FunctionFragment
    'getMappedAddressByIndex(address,uint256)': FunctionFragment
    'getPendingRequestMappingByIndex(address,uint256)': FunctionFragment
    'getTargetOfAddress(address)': FunctionFragment
    'iam()': FunctionFragment
    'increaseAllowance(address,uint256)': FunctionFragment
    'initialize(string,string,address)': FunctionFragment
    'isMappedAddress(address)': FunctionFragment
    'isTargetMappingAddress(address)': FunctionFragment
    'lockBridge()': FunctionFragment
    'masterOwner()': FunctionFragment
    'migrate(uint256)': FunctionFragment
    'migrated(address)': FunctionFragment
    'migration()': FunctionFragment
    'mint(address,uint256)': FunctionFragment
    'name()': FunctionFragment
    'ownerByIndex(uint256)': FunctionFragment
    'paused()': FunctionFragment
    'privTransfer(address,uint256,uint256)': FunctionFragment
    'rejectMappedAddress(address)': FunctionFragment
    'removeBridge(address)': FunctionFragment
    'removeOwner(address)': FunctionFragment
    'renounceMasterOwnership()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'requestMappingToTarget(address)': FunctionFragment
    'setMigration(address)': FunctionFragment
    'snapshot()': FunctionFragment
    'symbol()': FunctionFragment
    'totalSupply()': FunctionFragment
    'totalSupplyAt(uint256)': FunctionFragment
    'transfer(address,uint256)': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'transferMasterOwnership(address)': FunctionFragment
    'unmappingAddress()': FunctionFragment
    'updateBalance(address,uint256,string)': FunctionFragment
    'updateIAM(address)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'acceptMappingAddress'
      | 'addBridge'
      | 'addOwner'
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'balanceOfAt'
      | 'bridgeIn'
      | 'bridgeOut'
      | 'bridgeTokens'
      | 'burn'
      | 'cancelPendingMapping'
      | 'countMappedAddresses'
      | 'countPendingRequestMapping'
      | 'decimals'
      | 'decreaseAllowance'
      | 'getCurrentRequestMapping'
      | 'getCurrentSnapshotId'
      | 'getMappedAddressByIndex'
      | 'getPendingRequestMappingByIndex'
      | 'getTargetOfAddress'
      | 'iam'
      | 'increaseAllowance'
      | 'initialize'
      | 'isMappedAddress'
      | 'isTargetMappingAddress'
      | 'lockBridge'
      | 'masterOwner'
      | 'migrate'
      | 'migrated'
      | 'migration'
      | 'mint'
      | 'name'
      | 'ownerByIndex'
      | 'paused'
      | 'privTransfer'
      | 'rejectMappedAddress'
      | 'removeBridge'
      | 'removeOwner'
      | 'renounceMasterOwnership'
      | 'renounceOwnership'
      | 'requestMappingToTarget'
      | 'setMigration'
      | 'snapshot'
      | 'symbol'
      | 'totalSupply'
      | 'totalSupplyAt'
      | 'transfer'
      | 'transferFrom'
      | 'transferMasterOwnership'
      | 'unmappingAddress'
      | 'updateBalance'
      | 'updateIAM',
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'acceptMappingAddress',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'addBridge',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'addOwner',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'balanceOfAt',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'bridgeIn',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(
    functionFragment: 'bridgeOut',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'bridgeTokens',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'burn',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'cancelPendingMapping',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'countMappedAddresses',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'countPendingRequestMapping',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'getCurrentRequestMapping',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'getCurrentSnapshotId',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'getMappedAddressByIndex',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'getPendingRequestMappingByIndex',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'getTargetOfAddress',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(functionFragment: 'iam', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'isMappedAddress',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'isTargetMappingAddress',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(functionFragment: 'lockBridge', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'masterOwner',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'migrate',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'migrated',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(functionFragment: 'migration', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'mint',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'ownerByIndex',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'privTransfer',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'rejectMappedAddress',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'removeBridge',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'removeOwner',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'renounceMasterOwnership',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'requestMappingToTarget',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'setMigration',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(functionFragment: 'snapshot', values?: undefined): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'totalSupplyAt',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'transferMasterOwnership',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'unmappingAddress',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'updateBalance',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'updateIAM',
    values: [PromiseOrValue<string>],
  ): string

  decodeFunctionResult(
    functionFragment: 'acceptMappingAddress',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'addBridge', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'addOwner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOfAt', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'bridgeIn', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'bridgeOut', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'bridgeTokens',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'cancelPendingMapping',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'countMappedAddresses',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'countPendingRequestMapping',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCurrentRequestMapping',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCurrentSnapshotId',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getMappedAddressByIndex',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getPendingRequestMappingByIndex',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getTargetOfAddress',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'iam', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'isMappedAddress',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'isTargetMappingAddress',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'lockBridge', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'masterOwner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'migrate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'migrated', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'migration', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'ownerByIndex',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'privTransfer',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'rejectMappedAddress',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'removeBridge',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'removeOwner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'renounceMasterOwnership',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'requestMappingToTarget',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'setMigration',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'snapshot', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'totalSupplyAt',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferMasterOwnership',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'unmappingAddress',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateBalance',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'updateIAM', data: BytesLike): Result

  events: {
    'AcceptMappingAddress(address,address)': EventFragment
    'Approval(address,address,uint256)': EventFragment
    'BridgeIn(address,uint256)': EventFragment
    'BridgeOut(address,uint256)': EventFragment
    'CancelMappingAddress(address,address)': EventFragment
    'MapAddress(address,address)': EventFragment
    'MasterOwnershipTransferred(address,address)': EventFragment
    'Migration(address,uint256)': EventFragment
    'Paused(address)': EventFragment
    'PrivateTransfer(uint256)': EventFragment
    'RenounceMasterOwnership(address)': EventFragment
    'RenounceOwnership(address)': EventFragment
    'RequestMappingAddress(address,address)': EventFragment
    'RevokeOwner(address)': EventFragment
    'SetOwner(address)': EventFragment
    'Snapshot(uint256)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
    'UnMapAddress(address,address)': EventFragment
    'Unpaused(address)': EventFragment
    'UpdateBalance(address,uint256,uint256,string)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AcceptMappingAddress'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'BridgeIn'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'BridgeOut'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CancelMappingAddress'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'MapAddress'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'MasterOwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Migration'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PrivateTransfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RenounceMasterOwnership'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RenounceOwnership'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RequestMappingAddress'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RevokeOwner'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SetOwner'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Snapshot'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UnMapAddress'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateBalance'): EventFragment
}

export interface AcceptMappingAddressEventObject {
  from: string
  target: string
}
export type AcceptMappingAddressEvent = TypedEvent<
  [string, string],
  AcceptMappingAddressEventObject
>

export type AcceptMappingAddressEventFilter =
  TypedEventFilter<AcceptMappingAddressEvent>

export interface ApprovalEventObject {
  owner: string
  spender: string
  value: BigNumber
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>

export interface BridgeInEventObject {
  account: string
  amount: BigNumber
}
export type BridgeInEvent = TypedEvent<[string, BigNumber], BridgeInEventObject>

export type BridgeInEventFilter = TypedEventFilter<BridgeInEvent>

export interface BridgeOutEventObject {
  account: string
  amount: BigNumber
}
export type BridgeOutEvent = TypedEvent<
  [string, BigNumber],
  BridgeOutEventObject
>

export type BridgeOutEventFilter = TypedEventFilter<BridgeOutEvent>

export interface CancelMappingAddressEventObject {
  from: string
  target: string
}
export type CancelMappingAddressEvent = TypedEvent<
  [string, string],
  CancelMappingAddressEventObject
>

export type CancelMappingAddressEventFilter =
  TypedEventFilter<CancelMappingAddressEvent>

export interface MapAddressEventObject {
  from: string
  target: string
}
export type MapAddressEvent = TypedEvent<
  [string, string],
  MapAddressEventObject
>

export type MapAddressEventFilter = TypedEventFilter<MapAddressEvent>

export interface MasterOwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type MasterOwnershipTransferredEvent = TypedEvent<
  [string, string],
  MasterOwnershipTransferredEventObject
>

export type MasterOwnershipTransferredEventFilter =
  TypedEventFilter<MasterOwnershipTransferredEvent>

export interface MigrationEventObject {
  account: string
  amount: BigNumber
}
export type MigrationEvent = TypedEvent<
  [string, BigNumber],
  MigrationEventObject
>

export type MigrationEventFilter = TypedEventFilter<MigrationEvent>

export interface PausedEventObject {
  account: string
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>

export type PausedEventFilter = TypedEventFilter<PausedEvent>

export interface PrivateTransferEventObject {
  timestamp: BigNumber
}
export type PrivateTransferEvent = TypedEvent<
  [BigNumber],
  PrivateTransferEventObject
>

export type PrivateTransferEventFilter = TypedEventFilter<PrivateTransferEvent>

export interface RenounceMasterOwnershipEventObject {
  owner: string
}
export type RenounceMasterOwnershipEvent = TypedEvent<
  [string],
  RenounceMasterOwnershipEventObject
>

export type RenounceMasterOwnershipEventFilter =
  TypedEventFilter<RenounceMasterOwnershipEvent>

export interface RenounceOwnershipEventObject {
  owner: string
}
export type RenounceOwnershipEvent = TypedEvent<
  [string],
  RenounceOwnershipEventObject
>

export type RenounceOwnershipEventFilter =
  TypedEventFilter<RenounceOwnershipEvent>

export interface RequestMappingAddressEventObject {
  from: string
  target: string
}
export type RequestMappingAddressEvent = TypedEvent<
  [string, string],
  RequestMappingAddressEventObject
>

export type RequestMappingAddressEventFilter =
  TypedEventFilter<RequestMappingAddressEvent>

export interface RevokeOwnerEventObject {
  owner: string
}
export type RevokeOwnerEvent = TypedEvent<[string], RevokeOwnerEventObject>

export type RevokeOwnerEventFilter = TypedEventFilter<RevokeOwnerEvent>

export interface SetOwnerEventObject {
  newOwner: string
}
export type SetOwnerEvent = TypedEvent<[string], SetOwnerEventObject>

export type SetOwnerEventFilter = TypedEventFilter<SetOwnerEvent>

export interface SnapshotEventObject {
  id: BigNumber
}
export type SnapshotEvent = TypedEvent<[BigNumber], SnapshotEventObject>

export type SnapshotEventFilter = TypedEventFilter<SnapshotEvent>

export interface TransferEventObject {
  from: string
  to: string
  value: BigNumber
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>

export type TransferEventFilter = TypedEventFilter<TransferEvent>

export interface UnMapAddressEventObject {
  from: string
  target: string
}
export type UnMapAddressEvent = TypedEvent<
  [string, string],
  UnMapAddressEventObject
>

export type UnMapAddressEventFilter = TypedEventFilter<UnMapAddressEvent>

export interface UnpausedEventObject {
  account: string
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>

export interface UpdateBalanceEventObject {
  account: string
  beforeBalance: BigNumber
  afterBalance: BigNumber
  reason: string
}
export type UpdateBalanceEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  UpdateBalanceEventObject
>

export type UpdateBalanceEventFilter = TypedEventFilter<UpdateBalanceEvent>

export interface BooPrivate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: BooPrivateInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    acceptMappingAddress(
      _requester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    addBridge(
      _bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    addOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    balanceOfAt(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    bridgeIn(
      _bridgeToken: PromiseOrValue<string>,
      _id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    bridgeOut(
      _bridgeToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    bridgeTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    burn(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    cancelPendingMapping(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    countMappedAddresses(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    countPendingRequestMapping(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    decimals(overrides?: CallOverrides): Promise<[number]>

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    getCurrentRequestMapping(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string]>

    getCurrentSnapshotId(overrides?: CallOverrides): Promise<[BigNumber]>

    getMappedAddressByIndex(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>

    getPendingRequestMappingByIndex(
      _account: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>

    getTargetOfAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string]>

    iam(overrides?: CallOverrides): Promise<[string]>

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _iam: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    isMappedAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    isTargetMappingAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    lockBridge(overrides?: CallOverrides): Promise<[string]>

    masterOwner(overrides?: CallOverrides): Promise<[string]>

    migrate(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    migrated(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    migration(overrides?: CallOverrides): Promise<[string]>

    mint(
      _address: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    name(overrides?: CallOverrides): Promise<[string]>

    ownerByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    privTransfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    rejectMappedAddress(
      _mappedAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    removeBridge(
      _bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    removeOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    renounceMasterOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    requestMappingToTarget(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setMigration(
      _migration: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    snapshot(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    symbol(overrides?: CallOverrides): Promise<[string]>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    totalSupplyAt(
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    transferMasterOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    unmappingAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    updateBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    updateIAM(
      _iam: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>
  }

  acceptMappingAddress(
    _requester: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  addBridge(
    _bridge: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  addOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  balanceOfAt(
    account: PromiseOrValue<string>,
    snapshotId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  bridgeIn(
    _bridgeToken: PromiseOrValue<string>,
    _id: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  bridgeOut(
    _bridgeToken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  bridgeTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>

  burn(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  cancelPendingMapping(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  countMappedAddresses(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  countPendingRequestMapping(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  decimals(overrides?: CallOverrides): Promise<number>

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  getCurrentRequestMapping(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<string>

  getCurrentSnapshotId(overrides?: CallOverrides): Promise<BigNumber>

  getMappedAddressByIndex(
    account: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>

  getPendingRequestMappingByIndex(
    _account: PromiseOrValue<string>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>

  getTargetOfAddress(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<string>

  iam(overrides?: CallOverrides): Promise<string>

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  initialize(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _iam: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  isMappedAddress(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>

  isTargetMappingAddress(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>

  lockBridge(overrides?: CallOverrides): Promise<string>

  masterOwner(overrides?: CallOverrides): Promise<string>

  migrate(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  migrated(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>

  migration(overrides?: CallOverrides): Promise<string>

  mint(
    _address: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  name(overrides?: CallOverrides): Promise<string>

  ownerByIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>

  paused(overrides?: CallOverrides): Promise<boolean>

  privTransfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  rejectMappedAddress(
    _mappedAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  removeBridge(
    _bridge: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  removeOwner(
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  renounceMasterOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  requestMappingToTarget(
    _target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setMigration(
    _migration: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  snapshot(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  symbol(overrides?: CallOverrides): Promise<string>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  totalSupplyAt(
    snapshotId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  transfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  transferFrom(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  transferMasterOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  unmappingAddress(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  updateBalance(
    _account: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  updateIAM(
    _iam: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  callStatic: {
    acceptMappingAddress(
      _requester: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    addBridge(
      _bridge: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    addOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    balanceOfAt(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    bridgeIn(
      _bridgeToken: PromiseOrValue<string>,
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>

    bridgeOut(
      _bridgeToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    bridgeTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    burn(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    cancelPendingMapping(overrides?: CallOverrides): Promise<void>

    countMappedAddresses(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    countPendingRequestMapping(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<number>

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    getCurrentRequestMapping(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>

    getCurrentSnapshotId(overrides?: CallOverrides): Promise<BigNumber>

    getMappedAddressByIndex(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>

    getPendingRequestMappingByIndex(
      _account: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>

    getTargetOfAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>

    iam(overrides?: CallOverrides): Promise<string>

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _iam: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    isMappedAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    isTargetMappingAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    lockBridge(overrides?: CallOverrides): Promise<string>

    masterOwner(overrides?: CallOverrides): Promise<string>

    migrate(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    migrated(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    migration(overrides?: CallOverrides): Promise<string>

    mint(
      _address: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    name(overrides?: CallOverrides): Promise<string>

    ownerByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>

    paused(overrides?: CallOverrides): Promise<boolean>

    privTransfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    rejectMappedAddress(
      _mappedAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    removeBridge(
      _bridge: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    removeOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    renounceMasterOwnership(overrides?: CallOverrides): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    requestMappingToTarget(
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    setMigration(
      _migration: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    snapshot(overrides?: CallOverrides): Promise<void>

    symbol(overrides?: CallOverrides): Promise<string>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    totalSupplyAt(
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    transferMasterOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    unmappingAddress(overrides?: CallOverrides): Promise<void>

    updateBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _reason: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    updateIAM(
      _iam: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>
  }

  filters: {
    'AcceptMappingAddress(address,address)'(
      from?: PromiseOrValue<string> | null,
      target?: null,
    ): AcceptMappingAddressEventFilter
    AcceptMappingAddress(
      from?: PromiseOrValue<string> | null,
      target?: null,
    ): AcceptMappingAddressEventFilter

    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter

    'BridgeIn(address,uint256)'(
      account?: PromiseOrValue<string> | null,
      amount?: null,
    ): BridgeInEventFilter
    BridgeIn(
      account?: PromiseOrValue<string> | null,
      amount?: null,
    ): BridgeInEventFilter

    'BridgeOut(address,uint256)'(
      account?: PromiseOrValue<string> | null,
      amount?: null,
    ): BridgeOutEventFilter
    BridgeOut(
      account?: PromiseOrValue<string> | null,
      amount?: null,
    ): BridgeOutEventFilter

    'CancelMappingAddress(address,address)'(
      from?: PromiseOrValue<string> | null,
      target?: null,
    ): CancelMappingAddressEventFilter
    CancelMappingAddress(
      from?: PromiseOrValue<string> | null,
      target?: null,
    ): CancelMappingAddressEventFilter

    'MapAddress(address,address)'(
      from?: PromiseOrValue<string> | null,
      target?: null,
    ): MapAddressEventFilter
    MapAddress(
      from?: PromiseOrValue<string> | null,
      target?: null,
    ): MapAddressEventFilter

    'MasterOwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): MasterOwnershipTransferredEventFilter
    MasterOwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): MasterOwnershipTransferredEventFilter

    'Migration(address,uint256)'(
      account?: PromiseOrValue<string> | null,
      amount?: null,
    ): MigrationEventFilter
    Migration(
      account?: PromiseOrValue<string> | null,
      amount?: null,
    ): MigrationEventFilter

    'Paused(address)'(account?: null): PausedEventFilter
    Paused(account?: null): PausedEventFilter

    'PrivateTransfer(uint256)'(timestamp?: null): PrivateTransferEventFilter
    PrivateTransfer(timestamp?: null): PrivateTransferEventFilter

    'RenounceMasterOwnership(address)'(
      owner?: PromiseOrValue<string> | null,
    ): RenounceMasterOwnershipEventFilter
    RenounceMasterOwnership(
      owner?: PromiseOrValue<string> | null,
    ): RenounceMasterOwnershipEventFilter

    'RenounceOwnership(address)'(
      owner?: PromiseOrValue<string> | null,
    ): RenounceOwnershipEventFilter
    RenounceOwnership(
      owner?: PromiseOrValue<string> | null,
    ): RenounceOwnershipEventFilter

    'RequestMappingAddress(address,address)'(
      from?: PromiseOrValue<string> | null,
      target?: null,
    ): RequestMappingAddressEventFilter
    RequestMappingAddress(
      from?: PromiseOrValue<string> | null,
      target?: null,
    ): RequestMappingAddressEventFilter

    'RevokeOwner(address)'(
      owner?: PromiseOrValue<string> | null,
    ): RevokeOwnerEventFilter
    RevokeOwner(owner?: PromiseOrValue<string> | null): RevokeOwnerEventFilter

    'SetOwner(address)'(
      newOwner?: PromiseOrValue<string> | null,
    ): SetOwnerEventFilter
    SetOwner(newOwner?: PromiseOrValue<string> | null): SetOwnerEventFilter

    'Snapshot(uint256)'(id?: null): SnapshotEventFilter
    Snapshot(id?: null): SnapshotEventFilter

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter

    'UnMapAddress(address,address)'(
      from?: PromiseOrValue<string> | null,
      target?: null,
    ): UnMapAddressEventFilter
    UnMapAddress(
      from?: PromiseOrValue<string> | null,
      target?: null,
    ): UnMapAddressEventFilter

    'Unpaused(address)'(account?: null): UnpausedEventFilter
    Unpaused(account?: null): UnpausedEventFilter

    'UpdateBalance(address,uint256,uint256,string)'(
      account?: PromiseOrValue<string> | null,
      beforeBalance?: null,
      afterBalance?: null,
      reason?: null,
    ): UpdateBalanceEventFilter
    UpdateBalance(
      account?: PromiseOrValue<string> | null,
      beforeBalance?: null,
      afterBalance?: null,
      reason?: null,
    ): UpdateBalanceEventFilter
  }

  estimateGas: {
    acceptMappingAddress(
      _requester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    addBridge(
      _bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    addOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    balanceOfAt(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    bridgeIn(
      _bridgeToken: PromiseOrValue<string>,
      _id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    bridgeOut(
      _bridgeToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    bridgeTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    burn(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    cancelPendingMapping(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    countMappedAddresses(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    countPendingRequestMapping(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<BigNumber>

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    getCurrentRequestMapping(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getCurrentSnapshotId(overrides?: CallOverrides): Promise<BigNumber>

    getMappedAddressByIndex(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getPendingRequestMappingByIndex(
      _account: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getTargetOfAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    iam(overrides?: CallOverrides): Promise<BigNumber>

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _iam: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    isMappedAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    isTargetMappingAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    lockBridge(overrides?: CallOverrides): Promise<BigNumber>

    masterOwner(overrides?: CallOverrides): Promise<BigNumber>

    migrate(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    migrated(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    migration(overrides?: CallOverrides): Promise<BigNumber>

    mint(
      _address: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    ownerByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    privTransfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    rejectMappedAddress(
      _mappedAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    removeBridge(
      _bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    removeOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    renounceMasterOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    requestMappingToTarget(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setMigration(
      _migration: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    snapshot(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    totalSupplyAt(
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    transferMasterOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    unmappingAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    updateBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    updateIAM(
      _iam: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    acceptMappingAddress(
      _requester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    addBridge(
      _bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    addOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    balanceOfAt(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    bridgeIn(
      _bridgeToken: PromiseOrValue<string>,
      _id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    bridgeOut(
      _bridgeToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    bridgeTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    burn(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    cancelPendingMapping(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    countMappedAddresses(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    countPendingRequestMapping(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    getCurrentRequestMapping(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getCurrentSnapshotId(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getMappedAddressByIndex(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getPendingRequestMappingByIndex(
      _account: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getTargetOfAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    iam(overrides?: CallOverrides): Promise<PopulatedTransaction>

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _iam: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    isMappedAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    isTargetMappingAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    lockBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>

    masterOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    migrate(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    migrated(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    migration(overrides?: CallOverrides): Promise<PopulatedTransaction>

    mint(
      _address: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    ownerByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    privTransfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    rejectMappedAddress(
      _mappedAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    removeBridge(
      _bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    removeOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    renounceMasterOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    requestMappingToTarget(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setMigration(
      _migration: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    snapshot(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSupplyAt(
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    transferMasterOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    unmappingAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    updateBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    updateIAM(
      _iam: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>
  }
}
