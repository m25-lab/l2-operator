/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export interface BooPublicInterface extends utils.Interface {
  functions: {
    'acceptMappingAddress(address)': FunctionFragment
    'allowance(address,address)': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'approveBridge(address,bytes32)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'balanceOfAt(address,uint256)': FunctionFragment
    'bridgeIn(address,uint256)': FunctionFragment
    'bridgeInfos(bytes32)': FunctionFragment
    'bridgeNonces(address)': FunctionFragment
    'bridgeOut(uint256)': FunctionFragment
    'cancelBridge(bytes32)': FunctionFragment
    'cancelPendingMapping()': FunctionFragment
    'countMappedAddresses(address)': FunctionFragment
    'countPendingRequestMapping(address)': FunctionFragment
    'decimals()': FunctionFragment
    'decreaseAllowance(address,uint256)': FunctionFragment
    'getBridgeAmount(bytes32)': FunctionFragment
    'getBridgeOwner(bytes32)': FunctionFragment
    'getCurrentRequestMapping(address)': FunctionFragment
    'getMappedAddressByIndex(address,uint256)': FunctionFragment
    'getPendingRequestMappingByIndex(address,uint256)': FunctionFragment
    'getTargetOfAddress(address)': FunctionFragment
    'iam()': FunctionFragment
    'increaseAllowance(address,uint256)': FunctionFragment
    'initialize(string,string,address,address)': FunctionFragment
    'isMainMERC20(address)': FunctionFragment
    'isMappedAddress(address)': FunctionFragment
    'isPendingBridge(bytes32)': FunctionFragment
    'isTargetMappingAddress(address)': FunctionFragment
    'merc20()': FunctionFragment
    'name()': FunctionFragment
    'owner()': FunctionFragment
    'paused()': FunctionFragment
    'rejectMappedAddress(address)': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'requestMappingToTarget(address)': FunctionFragment
    'symbol()': FunctionFragment
    'totalSupply()': FunctionFragment
    'totalSupplyAt(uint256)': FunctionFragment
    'transfer(address,uint256)': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'unmappingAddress()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'acceptMappingAddress'
      | 'allowance'
      | 'approve'
      | 'approveBridge'
      | 'balanceOf'
      | 'balanceOfAt'
      | 'bridgeIn'
      | 'bridgeInfos'
      | 'bridgeNonces'
      | 'bridgeOut'
      | 'cancelBridge'
      | 'cancelPendingMapping'
      | 'countMappedAddresses'
      | 'countPendingRequestMapping'
      | 'decimals'
      | 'decreaseAllowance'
      | 'getBridgeAmount'
      | 'getBridgeOwner'
      | 'getCurrentRequestMapping'
      | 'getMappedAddressByIndex'
      | 'getPendingRequestMappingByIndex'
      | 'getTargetOfAddress'
      | 'iam'
      | 'increaseAllowance'
      | 'initialize'
      | 'isMainMERC20'
      | 'isMappedAddress'
      | 'isPendingBridge'
      | 'isTargetMappingAddress'
      | 'merc20'
      | 'name'
      | 'owner'
      | 'paused'
      | 'rejectMappedAddress'
      | 'renounceOwnership'
      | 'requestMappingToTarget'
      | 'symbol'
      | 'totalSupply'
      | 'totalSupplyAt'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'unmappingAddress',
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'acceptMappingAddress',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'approveBridge',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'balanceOfAt',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'bridgeIn',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'bridgeInfos',
    values: [PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(
    functionFragment: 'bridgeNonces',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'bridgeOut',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'cancelBridge',
    values: [PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(
    functionFragment: 'cancelPendingMapping',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'countMappedAddresses',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'countPendingRequestMapping',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'getBridgeAmount',
    values: [PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(
    functionFragment: 'getBridgeOwner',
    values: [PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(
    functionFragment: 'getCurrentRequestMapping',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'getMappedAddressByIndex',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'getPendingRequestMappingByIndex',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'getTargetOfAddress',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(functionFragment: 'iam', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'isMainMERC20',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'isMappedAddress',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'isPendingBridge',
    values: [PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(
    functionFragment: 'isTargetMappingAddress',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(functionFragment: 'merc20', values?: undefined): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'rejectMappedAddress',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'requestMappingToTarget',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'totalSupplyAt',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'unmappingAddress',
    values?: undefined,
  ): string

  decodeFunctionResult(
    functionFragment: 'acceptMappingAddress',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'approveBridge',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOfAt', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'bridgeIn', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'bridgeInfos', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'bridgeNonces',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'bridgeOut', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'cancelBridge',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'cancelPendingMapping',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'countMappedAddresses',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'countPendingRequestMapping',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getBridgeAmount',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getBridgeOwner',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCurrentRequestMapping',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getMappedAddressByIndex',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getPendingRequestMappingByIndex',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getTargetOfAddress',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'iam', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'isMainMERC20',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'isMappedAddress',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'isPendingBridge',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'isTargetMappingAddress',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'merc20', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'rejectMappedAddress',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'requestMappingToTarget',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'totalSupplyAt',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'unmappingAddress',
    data: BytesLike,
  ): Result

  events: {
    'AcceptMappingAddress(address,address)': EventFragment
    'Approval(address,address,uint256)': EventFragment
    'ApproveBridge(address,bytes32)': EventFragment
    'BridgeOut(address,bytes32,uint256)': EventFragment
    'CancelBridge(address,bytes32)': EventFragment
    'CancelMappingAddress(address,address)': EventFragment
    'MapAddress(address,address)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'Paused(address)': EventFragment
    'RequestMappingAddress(address,address)': EventFragment
    'Snapshot(uint256)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
    'UnMapAddress(address,address)': EventFragment
    'Unpaused(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AcceptMappingAddress'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ApproveBridge'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'BridgeOut'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CancelBridge'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CancelMappingAddress'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'MapAddress'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RequestMappingAddress'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Snapshot'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UnMapAddress'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
}

export interface AcceptMappingAddressEventObject {
  from: string
  target: string
}
export type AcceptMappingAddressEvent = TypedEvent<
  [string, string],
  AcceptMappingAddressEventObject
>

export type AcceptMappingAddressEventFilter =
  TypedEventFilter<AcceptMappingAddressEvent>

export interface ApprovalEventObject {
  owner: string
  spender: string
  value: BigNumber
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>

export interface ApproveBridgeEventObject {
  account: string
  id: string
}
export type ApproveBridgeEvent = TypedEvent<
  [string, string],
  ApproveBridgeEventObject
>

export type ApproveBridgeEventFilter = TypedEventFilter<ApproveBridgeEvent>

export interface BridgeOutEventObject {
  account: string
  id: string
  amount: BigNumber
}
export type BridgeOutEvent = TypedEvent<
  [string, string, BigNumber],
  BridgeOutEventObject
>

export type BridgeOutEventFilter = TypedEventFilter<BridgeOutEvent>

export interface CancelBridgeEventObject {
  account: string
  id: string
}
export type CancelBridgeEvent = TypedEvent<
  [string, string],
  CancelBridgeEventObject
>

export type CancelBridgeEventFilter = TypedEventFilter<CancelBridgeEvent>

export interface CancelMappingAddressEventObject {
  from: string
  target: string
}
export type CancelMappingAddressEvent = TypedEvent<
  [string, string],
  CancelMappingAddressEventObject
>

export type CancelMappingAddressEventFilter =
  TypedEventFilter<CancelMappingAddressEvent>

export interface MapAddressEventObject {
  from: string
  target: string
}
export type MapAddressEvent = TypedEvent<
  [string, string],
  MapAddressEventObject
>

export type MapAddressEventFilter = TypedEventFilter<MapAddressEvent>

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>

export interface PausedEventObject {
  account: string
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>

export type PausedEventFilter = TypedEventFilter<PausedEvent>

export interface RequestMappingAddressEventObject {
  from: string
  target: string
}
export type RequestMappingAddressEvent = TypedEvent<
  [string, string],
  RequestMappingAddressEventObject
>

export type RequestMappingAddressEventFilter =
  TypedEventFilter<RequestMappingAddressEvent>

export interface SnapshotEventObject {
  id: BigNumber
}
export type SnapshotEvent = TypedEvent<[BigNumber], SnapshotEventObject>

export type SnapshotEventFilter = TypedEventFilter<SnapshotEvent>

export interface TransferEventObject {
  from: string
  to: string
  value: BigNumber
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>

export type TransferEventFilter = TypedEventFilter<TransferEvent>

export interface UnMapAddressEventObject {
  from: string
  target: string
}
export type UnMapAddressEvent = TypedEvent<
  [string, string],
  UnMapAddressEventObject
>

export type UnMapAddressEventFilter = TypedEventFilter<UnMapAddressEvent>

export interface UnpausedEventObject {
  account: string
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>

export interface BooPublic extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: BooPublicInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    acceptMappingAddress(
      _requester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    approveBridge(
      _account: PromiseOrValue<string>,
      _id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    balanceOfAt(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    bridgeIn(
      _address: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    bridgeInfos(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, boolean] & {
        account: string
        amount: BigNumber
        done: boolean
      }
    >

    bridgeNonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    bridgeOut(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    cancelBridge(
      _id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    cancelPendingMapping(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    countMappedAddresses(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    countPendingRequestMapping(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    decimals(overrides?: CallOverrides): Promise<[number]>

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    getBridgeAmount(
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getBridgeOwner(
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[string]>

    getCurrentRequestMapping(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string]>

    getMappedAddressByIndex(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>

    getPendingRequestMappingByIndex(
      _account: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>

    getTargetOfAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string]>

    iam(overrides?: CallOverrides): Promise<[string]>

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _iam: PromiseOrValue<string>,
      _merc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    isMainMERC20(
      _merc20: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    isMappedAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    isPendingBridge(
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    isTargetMappingAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    merc20(overrides?: CallOverrides): Promise<[string]>

    name(overrides?: CallOverrides): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    rejectMappedAddress(
      _mappedAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    requestMappingToTarget(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    symbol(overrides?: CallOverrides): Promise<[string]>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    totalSupplyAt(
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    unmappingAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>
  }

  acceptMappingAddress(
    _requester: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  approveBridge(
    _account: PromiseOrValue<string>,
    _id: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  balanceOfAt(
    account: PromiseOrValue<string>,
    snapshotId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  bridgeIn(
    _address: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  bridgeInfos(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, boolean] & {
      account: string
      amount: BigNumber
      done: boolean
    }
  >

  bridgeNonces(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  bridgeOut(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  cancelBridge(
    _id: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  cancelPendingMapping(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  countMappedAddresses(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  countPendingRequestMapping(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  decimals(overrides?: CallOverrides): Promise<number>

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  getBridgeAmount(
    _id: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getBridgeOwner(
    _id: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<string>

  getCurrentRequestMapping(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<string>

  getMappedAddressByIndex(
    account: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>

  getPendingRequestMappingByIndex(
    _account: PromiseOrValue<string>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>

  getTargetOfAddress(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<string>

  iam(overrides?: CallOverrides): Promise<string>

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  initialize(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _iam: PromiseOrValue<string>,
    _merc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  isMainMERC20(
    _merc20: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>

  isMappedAddress(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>

  isPendingBridge(
    _id: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<boolean>

  isTargetMappingAddress(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>

  merc20(overrides?: CallOverrides): Promise<string>

  name(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  paused(overrides?: CallOverrides): Promise<boolean>

  rejectMappedAddress(
    _mappedAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  requestMappingToTarget(
    _target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  symbol(overrides?: CallOverrides): Promise<string>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  totalSupplyAt(
    snapshotId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  transfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  transferFrom(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  unmappingAddress(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  callStatic: {
    acceptMappingAddress(
      _requester: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    approveBridge(
      _account: PromiseOrValue<string>,
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    balanceOfAt(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    bridgeIn(
      _address: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    bridgeInfos(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, boolean] & {
        account: string
        amount: BigNumber
        done: boolean
      }
    >

    bridgeNonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    bridgeOut(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    cancelBridge(
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>

    cancelPendingMapping(overrides?: CallOverrides): Promise<void>

    countMappedAddresses(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    countPendingRequestMapping(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<number>

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    getBridgeAmount(
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getBridgeOwner(
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>

    getCurrentRequestMapping(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>

    getMappedAddressByIndex(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>

    getPendingRequestMappingByIndex(
      _account: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>

    getTargetOfAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>

    iam(overrides?: CallOverrides): Promise<string>

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _iam: PromiseOrValue<string>,
      _merc20: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    isMainMERC20(
      _merc20: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    isMappedAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    isPendingBridge(
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    isTargetMappingAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    merc20(overrides?: CallOverrides): Promise<string>

    name(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    paused(overrides?: CallOverrides): Promise<boolean>

    rejectMappedAddress(
      _mappedAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    requestMappingToTarget(
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    symbol(overrides?: CallOverrides): Promise<string>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    totalSupplyAt(
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    unmappingAddress(overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'AcceptMappingAddress(address,address)'(
      from?: PromiseOrValue<string> | null,
      target?: null,
    ): AcceptMappingAddressEventFilter
    AcceptMappingAddress(
      from?: PromiseOrValue<string> | null,
      target?: null,
    ): AcceptMappingAddressEventFilter

    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter

    'ApproveBridge(address,bytes32)'(
      account?: PromiseOrValue<string> | null,
      id?: null,
    ): ApproveBridgeEventFilter
    ApproveBridge(
      account?: PromiseOrValue<string> | null,
      id?: null,
    ): ApproveBridgeEventFilter

    'BridgeOut(address,bytes32,uint256)'(
      account?: PromiseOrValue<string> | null,
      id?: null,
      amount?: null,
    ): BridgeOutEventFilter
    BridgeOut(
      account?: PromiseOrValue<string> | null,
      id?: null,
      amount?: null,
    ): BridgeOutEventFilter

    'CancelBridge(address,bytes32)'(
      account?: PromiseOrValue<string> | null,
      id?: null,
    ): CancelBridgeEventFilter
    CancelBridge(
      account?: PromiseOrValue<string> | null,
      id?: null,
    ): CancelBridgeEventFilter

    'CancelMappingAddress(address,address)'(
      from?: PromiseOrValue<string> | null,
      target?: null,
    ): CancelMappingAddressEventFilter
    CancelMappingAddress(
      from?: PromiseOrValue<string> | null,
      target?: null,
    ): CancelMappingAddressEventFilter

    'MapAddress(address,address)'(
      from?: PromiseOrValue<string> | null,
      target?: null,
    ): MapAddressEventFilter
    MapAddress(
      from?: PromiseOrValue<string> | null,
      target?: null,
    ): MapAddressEventFilter

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter

    'Paused(address)'(account?: null): PausedEventFilter
    Paused(account?: null): PausedEventFilter

    'RequestMappingAddress(address,address)'(
      from?: PromiseOrValue<string> | null,
      target?: null,
    ): RequestMappingAddressEventFilter
    RequestMappingAddress(
      from?: PromiseOrValue<string> | null,
      target?: null,
    ): RequestMappingAddressEventFilter

    'Snapshot(uint256)'(id?: null): SnapshotEventFilter
    Snapshot(id?: null): SnapshotEventFilter

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter

    'UnMapAddress(address,address)'(
      from?: PromiseOrValue<string> | null,
      target?: null,
    ): UnMapAddressEventFilter
    UnMapAddress(
      from?: PromiseOrValue<string> | null,
      target?: null,
    ): UnMapAddressEventFilter

    'Unpaused(address)'(account?: null): UnpausedEventFilter
    Unpaused(account?: null): UnpausedEventFilter
  }

  estimateGas: {
    acceptMappingAddress(
      _requester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    approveBridge(
      _account: PromiseOrValue<string>,
      _id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    balanceOfAt(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    bridgeIn(
      _address: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    bridgeInfos(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    bridgeNonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    bridgeOut(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    cancelBridge(
      _id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    cancelPendingMapping(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    countMappedAddresses(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    countPendingRequestMapping(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<BigNumber>

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    getBridgeAmount(
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getBridgeOwner(
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getCurrentRequestMapping(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getMappedAddressByIndex(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getPendingRequestMappingByIndex(
      _account: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getTargetOfAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    iam(overrides?: CallOverrides): Promise<BigNumber>

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _iam: PromiseOrValue<string>,
      _merc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    isMainMERC20(
      _merc20: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    isMappedAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    isPendingBridge(
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    isTargetMappingAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    merc20(overrides?: CallOverrides): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    rejectMappedAddress(
      _mappedAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    requestMappingToTarget(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    totalSupplyAt(
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    unmappingAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    acceptMappingAddress(
      _requester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    approveBridge(
      _account: PromiseOrValue<string>,
      _id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    balanceOfAt(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    bridgeIn(
      _address: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    bridgeInfos(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    bridgeNonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    bridgeOut(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    cancelBridge(
      _id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    cancelPendingMapping(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    countMappedAddresses(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    countPendingRequestMapping(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    getBridgeAmount(
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getBridgeOwner(
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getCurrentRequestMapping(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getMappedAddressByIndex(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getPendingRequestMappingByIndex(
      _account: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getTargetOfAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    iam(overrides?: CallOverrides): Promise<PopulatedTransaction>

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _iam: PromiseOrValue<string>,
      _merc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    isMainMERC20(
      _merc20: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    isMappedAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    isPendingBridge(
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    isTargetMappingAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    merc20(overrides?: CallOverrides): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    rejectMappedAddress(
      _mappedAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    requestMappingToTarget(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSupplyAt(
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    unmappingAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>
  }
}
