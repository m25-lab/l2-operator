/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface AccountManagementInterface extends utils.Interface {
  functions: {
    "ADMIN()": FunctionFragment;
    "MANAGER()": FunctionFragment;
    "addOwner(address)": FunctionFragment;
    "getBlacklistsByIndex(address,uint256)": FunctionFragment;
    "getWhitelistsByIndex(address,uint256)": FunctionFragment;
    "initialize()": FunctionFragment;
    "isBlacklist(address,address)": FunctionFragment;
    "isDisableBlacklists(address)": FunctionFragment;
    "isDisableWhitelists(address)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "isWhitelist(address,address)": FunctionFragment;
    "masterOwner()": FunctionFragment;
    "ownerByIndex(uint256)": FunctionFragment;
    "removeOwner(address)": FunctionFragment;
    "renounceMasterOwnership()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDisableBlacklists(address,bool)": FunctionFragment;
    "setDisableWhitelist(address,bool)": FunctionFragment;
    "totalBlacklists(address)": FunctionFragment;
    "totalOwner()": FunctionFragment;
    "totalWhitelists(address)": FunctionFragment;
    "transferMasterOwnership(address)": FunctionFragment;
    "updateBlacklists(address,address[],bool)": FunctionFragment;
    "updateWhitelists(address,address[],bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADMIN"
      | "MANAGER"
      | "addOwner"
      | "getBlacklistsByIndex"
      | "getWhitelistsByIndex"
      | "initialize"
      | "isBlacklist"
      | "isDisableBlacklists"
      | "isDisableWhitelists"
      | "isOwner"
      | "isWhitelist"
      | "masterOwner"
      | "ownerByIndex"
      | "removeOwner"
      | "renounceMasterOwnership"
      | "renounceOwnership"
      | "setDisableBlacklists"
      | "setDisableWhitelist"
      | "totalBlacklists"
      | "totalOwner"
      | "totalWhitelists"
      | "transferMasterOwnership"
      | "updateBlacklists"
      | "updateWhitelists"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ADMIN", values?: undefined): string;
  encodeFunctionData(functionFragment: "MANAGER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlacklistsByIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelistsByIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBlacklist",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isDisableBlacklists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isDisableWhitelists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelist",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "masterOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceMasterOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDisableBlacklists",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDisableWhitelist",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBlacklists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWhitelists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferMasterOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBlacklists",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWhitelists",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MANAGER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBlacklistsByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelistsByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDisableBlacklists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDisableWhitelists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "masterOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceMasterOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDisableBlacklists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDisableWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBlacklists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalWhitelists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferMasterOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBlacklists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWhitelists",
    data: BytesLike
  ): Result;

  events: {
    "BlackListStatus(address,bool)": EventFragment;
    "BlackListUser(address,address,bool)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MasterOwnershipTransferred(address,address)": EventFragment;
    "RenounceMasterOwnership(address)": EventFragment;
    "RenounceOwnership(address)": EventFragment;
    "RevokeOwner(address)": EventFragment;
    "SetOwner(address)": EventFragment;
    "WhiteListStatus(address,bool)": EventFragment;
    "WhiteListUser(address,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BlackListStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlackListUser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MasterOwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RenounceMasterOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RenounceOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhiteListStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhiteListUser"): EventFragment;
}

export interface BlackListStatusEventObject {
  target: string;
  status: boolean;
}
export type BlackListStatusEvent = TypedEvent<
  [string, boolean],
  BlackListStatusEventObject
>;

export type BlackListStatusEventFilter = TypedEventFilter<BlackListStatusEvent>;

export interface BlackListUserEventObject {
  target: string;
  user: string;
  status: boolean;
}
export type BlackListUserEvent = TypedEvent<
  [string, string, boolean],
  BlackListUserEventObject
>;

export type BlackListUserEventFilter = TypedEventFilter<BlackListUserEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MasterOwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type MasterOwnershipTransferredEvent = TypedEvent<
  [string, string],
  MasterOwnershipTransferredEventObject
>;

export type MasterOwnershipTransferredEventFilter =
  TypedEventFilter<MasterOwnershipTransferredEvent>;

export interface RenounceMasterOwnershipEventObject {
  owner: string;
}
export type RenounceMasterOwnershipEvent = TypedEvent<
  [string],
  RenounceMasterOwnershipEventObject
>;

export type RenounceMasterOwnershipEventFilter =
  TypedEventFilter<RenounceMasterOwnershipEvent>;

export interface RenounceOwnershipEventObject {
  owner: string;
}
export type RenounceOwnershipEvent = TypedEvent<
  [string],
  RenounceOwnershipEventObject
>;

export type RenounceOwnershipEventFilter =
  TypedEventFilter<RenounceOwnershipEvent>;

export interface RevokeOwnerEventObject {
  owner: string;
}
export type RevokeOwnerEvent = TypedEvent<[string], RevokeOwnerEventObject>;

export type RevokeOwnerEventFilter = TypedEventFilter<RevokeOwnerEvent>;

export interface SetOwnerEventObject {
  newOwner: string;
}
export type SetOwnerEvent = TypedEvent<[string], SetOwnerEventObject>;

export type SetOwnerEventFilter = TypedEventFilter<SetOwnerEvent>;

export interface WhiteListStatusEventObject {
  target: string;
  status: boolean;
}
export type WhiteListStatusEvent = TypedEvent<
  [string, boolean],
  WhiteListStatusEventObject
>;

export type WhiteListStatusEventFilter = TypedEventFilter<WhiteListStatusEvent>;

export interface WhiteListUserEventObject {
  target: string;
  user: string;
  status: boolean;
}
export type WhiteListUserEvent = TypedEvent<
  [string, string, boolean],
  WhiteListUserEventObject
>;

export type WhiteListUserEventFilter = TypedEventFilter<WhiteListUserEvent>;

export interface AccountManagement extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AccountManagementInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN(overrides?: CallOverrides): Promise<[string]>;

    MANAGER(overrides?: CallOverrides): Promise<[string]>;

    addOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBlacklistsByIndex(
      _target: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getWhitelistsByIndex(
      _target: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isBlacklist(
      _target: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isDisableBlacklists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isDisableWhitelists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOwner(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelist(
      _target: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    masterOwner(overrides?: CallOverrides): Promise<[string]>;

    ownerByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceMasterOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDisableBlacklists(
      _target: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDisableWhitelist(
      _target: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalBlacklists(
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalOwner(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalWhitelists(
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferMasterOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateBlacklists(
      _target: PromiseOrValue<string>,
      _users: PromiseOrValue<string>[],
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateWhitelists(
      _target: PromiseOrValue<string>,
      _users: PromiseOrValue<string>[],
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ADMIN(overrides?: CallOverrides): Promise<string>;

  MANAGER(overrides?: CallOverrides): Promise<string>;

  addOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBlacklistsByIndex(
    _target: PromiseOrValue<string>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getWhitelistsByIndex(
    _target: PromiseOrValue<string>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isBlacklist(
    _target: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isDisableBlacklists(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isDisableWhitelists(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOwner(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelist(
    _target: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  masterOwner(overrides?: CallOverrides): Promise<string>;

  ownerByIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  removeOwner(
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceMasterOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDisableBlacklists(
    _target: PromiseOrValue<string>,
    _status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDisableWhitelist(
    _target: PromiseOrValue<string>,
    _status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalBlacklists(
    _target: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalOwner(overrides?: CallOverrides): Promise<BigNumber>;

  totalWhitelists(
    _target: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferMasterOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateBlacklists(
    _target: PromiseOrValue<string>,
    _users: PromiseOrValue<string>[],
    _status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateWhitelists(
    _target: PromiseOrValue<string>,
    _users: PromiseOrValue<string>[],
    _status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMIN(overrides?: CallOverrides): Promise<string>;

    MANAGER(overrides?: CallOverrides): Promise<string>;

    addOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBlacklistsByIndex(
      _target: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getWhitelistsByIndex(
      _target: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isBlacklist(
      _target: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isDisableBlacklists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isDisableWhitelists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwner(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelist(
      _target: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    masterOwner(overrides?: CallOverrides): Promise<string>;

    ownerByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    removeOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceMasterOwnership(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDisableBlacklists(
      _target: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDisableWhitelist(
      _target: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalBlacklists(
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalOwner(overrides?: CallOverrides): Promise<BigNumber>;

    totalWhitelists(
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferMasterOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBlacklists(
      _target: PromiseOrValue<string>,
      _users: PromiseOrValue<string>[],
      _status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWhitelists(
      _target: PromiseOrValue<string>,
      _users: PromiseOrValue<string>[],
      _status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BlackListStatus(address,bool)"(
      target?: PromiseOrValue<string> | null,
      status?: null
    ): BlackListStatusEventFilter;
    BlackListStatus(
      target?: PromiseOrValue<string> | null,
      status?: null
    ): BlackListStatusEventFilter;

    "BlackListUser(address,address,bool)"(
      target?: PromiseOrValue<string> | null,
      user?: null,
      status?: null
    ): BlackListUserEventFilter;
    BlackListUser(
      target?: PromiseOrValue<string> | null,
      user?: null,
      status?: null
    ): BlackListUserEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MasterOwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): MasterOwnershipTransferredEventFilter;
    MasterOwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): MasterOwnershipTransferredEventFilter;

    "RenounceMasterOwnership(address)"(
      owner?: PromiseOrValue<string> | null
    ): RenounceMasterOwnershipEventFilter;
    RenounceMasterOwnership(
      owner?: PromiseOrValue<string> | null
    ): RenounceMasterOwnershipEventFilter;

    "RenounceOwnership(address)"(
      owner?: PromiseOrValue<string> | null
    ): RenounceOwnershipEventFilter;
    RenounceOwnership(
      owner?: PromiseOrValue<string> | null
    ): RenounceOwnershipEventFilter;

    "RevokeOwner(address)"(
      owner?: PromiseOrValue<string> | null
    ): RevokeOwnerEventFilter;
    RevokeOwner(owner?: PromiseOrValue<string> | null): RevokeOwnerEventFilter;

    "SetOwner(address)"(
      newOwner?: PromiseOrValue<string> | null
    ): SetOwnerEventFilter;
    SetOwner(newOwner?: PromiseOrValue<string> | null): SetOwnerEventFilter;

    "WhiteListStatus(address,bool)"(
      target?: PromiseOrValue<string> | null,
      status?: null
    ): WhiteListStatusEventFilter;
    WhiteListStatus(
      target?: PromiseOrValue<string> | null,
      status?: null
    ): WhiteListStatusEventFilter;

    "WhiteListUser(address,address,bool)"(
      target?: PromiseOrValue<string> | null,
      user?: null,
      status?: null
    ): WhiteListUserEventFilter;
    WhiteListUser(
      target?: PromiseOrValue<string> | null,
      user?: null,
      status?: null
    ): WhiteListUserEventFilter;
  };

  estimateGas: {
    ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    addOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBlacklistsByIndex(
      _target: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWhitelistsByIndex(
      _target: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isBlacklist(
      _target: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDisableBlacklists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDisableWhitelists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelist(
      _target: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    masterOwner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceMasterOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDisableBlacklists(
      _target: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDisableWhitelist(
      _target: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalBlacklists(
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalOwner(overrides?: CallOverrides): Promise<BigNumber>;

    totalWhitelists(
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferMasterOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateBlacklists(
      _target: PromiseOrValue<string>,
      _users: PromiseOrValue<string>[],
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateWhitelists(
      _target: PromiseOrValue<string>,
      _users: PromiseOrValue<string>[],
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MANAGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBlacklistsByIndex(
      _target: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWhitelistsByIndex(
      _target: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isBlacklist(
      _target: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDisableBlacklists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDisableWhitelists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelist(
      _target: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceMasterOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDisableBlacklists(
      _target: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDisableWhitelist(
      _target: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalBlacklists(
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalWhitelists(
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferMasterOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateBlacklists(
      _target: PromiseOrValue<string>,
      _users: PromiseOrValue<string>[],
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateWhitelists(
      _target: PromiseOrValue<string>,
      _users: PromiseOrValue<string>[],
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
