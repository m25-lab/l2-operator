/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface SimpleStorageInterface extends utils.Interface {
  functions: {
    "get()": FunctionFragment;
    "set(uint256)": FunctionFragment;
    "storedData()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "get" | "set" | "storedData"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "get", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "storedData",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "storedData", data: BytesLike): Result;

  events: {
    "stored(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "stored"): EventFragment;
}

export interface storedEventObject {
  _to: string;
  _amount: BigNumber;
}
export type storedEvent = TypedEvent<[string, BigNumber], storedEventObject>;

export type storedEventFilter = TypedEventFilter<storedEvent>;

export interface SimpleStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SimpleStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    get(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { retVal: BigNumber }>;

    set(
      x: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storedData(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  get(overrides?: CallOverrides): Promise<BigNumber>;

  set(
    x: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storedData(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    get(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    storedData(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "stored(address,uint256)"(_to?: null, _amount?: null): storedEventFilter;
    stored(_to?: null, _amount?: null): storedEventFilter;
  };

  estimateGas: {
    get(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      x: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storedData(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    get(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    set(
      x: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storedData(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
