/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export declare namespace MPCBridgeConverter {
  export type BridgeDataStruct = {
    user: PromiseOrValue<string>
    pairId: PromiseOrValue<BigNumberish>
    amount: PromiseOrValue<BigNumberish>
    hash: PromiseOrValue<BytesLike>
  }

  export type BridgeDataStructOutput = [
    string,
    BigNumber,
    BigNumber,
    string,
  ] & { user: string; pairId: BigNumber; amount: BigNumber; hash: string }

  export type BridgePairStruct = {
    srcToken: PromiseOrValue<string>
    dstToken: PromiseOrValue<string>
    min: PromiseOrValue<BigNumberish>
    status: PromiseOrValue<boolean>
  }

  export type BridgePairStructOutput = [string, string, BigNumber, boolean] & {
    srcToken: string
    dstToken: string
    min: BigNumber
    status: boolean
  }
}

export interface BridgeConverterInterface extends utils.Interface {
  functions: {
    'addOwner(address)': FunctionFragment
    'burn(address,uint256)': FunctionFragment
    'convertDOO(uint256,uint256)': FunctionFragment
    'convertFrom(uint256,uint256)': FunctionFragment
    'createPair(address,address,uint256)': FunctionFragment
    'currentBridgeId()': FunctionFragment
    'currentReleasedId()': FunctionFragment
    'dstTokens(address)': FunctionFragment
    'existsPairIds(address,address)': FunctionFragment
    'getBridge(uint256)': FunctionFragment
    'getPairByIndex(uint256)': FunctionFragment
    'getPairId(address,address)': FunctionFragment
    'iam()': FunctionFragment
    'initialize(address)': FunctionFragment
    'isOpenMpc()': FunctionFragment
    'isOwner(address)': FunctionFragment
    'isReleased(bytes32)': FunctionFragment
    'isValidPair(address,address)': FunctionFragment
    'masterOwner()': FunctionFragment
    'mpcRelease(address,address,address,uint256,bytes32,uint256,bytes)': FunctionFragment
    'ownerByIndex(uint256)': FunctionFragment
    'pairs(uint256)': FunctionFragment
    'releasedHashs(bytes32)': FunctionFragment
    'removeOwner(address)': FunctionFragment
    'renounceMasterOwnership()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'safu(address,address)': FunctionFragment
    'safuNative(address)': FunctionFragment
    'srcTokens(address)': FunctionFragment
    'totalOwner()': FunctionFragment
    'totalPairs()': FunctionFragment
    'transferMasterOwnership(address)': FunctionFragment
    'updateDstToken(address,bool)': FunctionFragment
    'updateIAM(address)': FunctionFragment
    'updateMinPair(uint256,uint256)': FunctionFragment
    'updatePair(uint256,bool)': FunctionFragment
    'updateSrcToken(address,bool)': FunctionFragment
    'updateStatusOpenMPC(bool)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'addOwner'
      | 'burn'
      | 'convertDOO'
      | 'convertFrom'
      | 'createPair'
      | 'currentBridgeId'
      | 'currentReleasedId'
      | 'dstTokens'
      | 'existsPairIds'
      | 'getBridge'
      | 'getPairByIndex'
      | 'getPairId'
      | 'iam'
      | 'initialize'
      | 'isOpenMpc'
      | 'isOwner'
      | 'isReleased'
      | 'isValidPair'
      | 'masterOwner'
      | 'mpcRelease'
      | 'ownerByIndex'
      | 'pairs'
      | 'releasedHashs'
      | 'removeOwner'
      | 'renounceMasterOwnership'
      | 'renounceOwnership'
      | 'safu'
      | 'safuNative'
      | 'srcTokens'
      | 'totalOwner'
      | 'totalPairs'
      | 'transferMasterOwnership'
      | 'updateDstToken'
      | 'updateIAM'
      | 'updateMinPair'
      | 'updatePair'
      | 'updateSrcToken'
      | 'updateStatusOpenMPC',
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'addOwner',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'burn',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'convertDOO',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'convertFrom',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'createPair',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'currentBridgeId',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'currentReleasedId',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'dstTokens',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'existsPairIds',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'getBridge',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'getPairByIndex',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'getPairId',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string
  encodeFunctionData(functionFragment: 'iam', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(functionFragment: 'isOpenMpc', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'isOwner',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'isReleased',
    values: [PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(
    functionFragment: 'isValidPair',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'masterOwner',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'mpcRelease',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'ownerByIndex',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'pairs',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'releasedHashs',
    values: [PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(
    functionFragment: 'removeOwner',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'renounceMasterOwnership',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'safu',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'safuNative',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'srcTokens',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(functionFragment: 'totalOwner', values?: undefined): string
  encodeFunctionData(functionFragment: 'totalPairs', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'transferMasterOwnership',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'updateDstToken',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string
  encodeFunctionData(
    functionFragment: 'updateIAM',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'updateMinPair',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'updatePair',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string
  encodeFunctionData(
    functionFragment: 'updateSrcToken',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string
  encodeFunctionData(
    functionFragment: 'updateStatusOpenMPC',
    values: [PromiseOrValue<boolean>],
  ): string

  decodeFunctionResult(functionFragment: 'addOwner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'convertDOO', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'convertFrom', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'createPair', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'currentBridgeId',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'currentReleasedId',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'dstTokens', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'existsPairIds',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'getBridge', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getPairByIndex',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'getPairId', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'iam', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isOpenMpc', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isOwner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isReleased', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isValidPair', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'masterOwner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'mpcRelease', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'ownerByIndex',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'pairs', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'releasedHashs',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'removeOwner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'renounceMasterOwnership',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'safu', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'safuNative', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'srcTokens', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalOwner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalPairs', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferMasterOwnership',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateDstToken',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'updateIAM', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'updateMinPair',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'updatePair', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'updateSrcToken',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateStatusOpenMPC',
    data: BytesLike,
  ): Result

  events: {
    'Converter(address,uint256,uint256,bytes32)': EventFragment
    'CreatePair(address,address)': EventFragment
    'Initialized(uint8)': EventFragment
    'MPCRelease(address,uint256,bytes32)': EventFragment
    'MasterOwnershipTransferred(address,address)': EventFragment
    'RenounceMasterOwnership(address)': EventFragment
    'RenounceOwnership(address)': EventFragment
    'RevokeOwner(address)': EventFragment
    'Safu(address,address,uint256)': EventFragment
    'SafuNative(address,uint256)': EventFragment
    'SetOwner(address)': EventFragment
    'TransferNote(string)': EventFragment
    'UpdateIAM(address)': EventFragment
    'UpdateMinPair(uint256,uint256)': EventFragment
    'UpdateOpenMpc(bool)': EventFragment
    'UpdatePair(uint256,bool)': EventFragment
    'UpdateSigner(address,bool)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Converter'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CreatePair'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'MPCRelease'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'MasterOwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RenounceMasterOwnership'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RenounceOwnership'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RevokeOwner'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Safu'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SafuNative'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SetOwner'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TransferNote'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateIAM'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateMinPair'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateOpenMpc'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdatePair'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateSigner'): EventFragment
}

export interface ConverterEventObject {
  user: string
  id: BigNumber
  amount: BigNumber
  hash: string
}
export type ConverterEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  ConverterEventObject
>

export type ConverterEventFilter = TypedEventFilter<ConverterEvent>

export interface CreatePairEventObject {
  src: string
  dst: string
}
export type CreatePairEvent = TypedEvent<
  [string, string],
  CreatePairEventObject
>

export type CreatePairEventFilter = TypedEventFilter<CreatePairEvent>

export interface InitializedEventObject {
  version: number
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export interface MPCReleaseEventObject {
  user: string
  amount: BigNumber
  hash: string
}
export type MPCReleaseEvent = TypedEvent<
  [string, BigNumber, string],
  MPCReleaseEventObject
>

export type MPCReleaseEventFilter = TypedEventFilter<MPCReleaseEvent>

export interface MasterOwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type MasterOwnershipTransferredEvent = TypedEvent<
  [string, string],
  MasterOwnershipTransferredEventObject
>

export type MasterOwnershipTransferredEventFilter =
  TypedEventFilter<MasterOwnershipTransferredEvent>

export interface RenounceMasterOwnershipEventObject {
  owner: string
}
export type RenounceMasterOwnershipEvent = TypedEvent<
  [string],
  RenounceMasterOwnershipEventObject
>

export type RenounceMasterOwnershipEventFilter =
  TypedEventFilter<RenounceMasterOwnershipEvent>

export interface RenounceOwnershipEventObject {
  owner: string
}
export type RenounceOwnershipEvent = TypedEvent<
  [string],
  RenounceOwnershipEventObject
>

export type RenounceOwnershipEventFilter =
  TypedEventFilter<RenounceOwnershipEvent>

export interface RevokeOwnerEventObject {
  owner: string
}
export type RevokeOwnerEvent = TypedEvent<[string], RevokeOwnerEventObject>

export type RevokeOwnerEventFilter = TypedEventFilter<RevokeOwnerEvent>

export interface SafuEventObject {
  token: string
  user: string
  amount: BigNumber
}
export type SafuEvent = TypedEvent<[string, string, BigNumber], SafuEventObject>

export type SafuEventFilter = TypedEventFilter<SafuEvent>

export interface SafuNativeEventObject {
  user: string
  amount: BigNumber
}
export type SafuNativeEvent = TypedEvent<
  [string, BigNumber],
  SafuNativeEventObject
>

export type SafuNativeEventFilter = TypedEventFilter<SafuNativeEvent>

export interface SetOwnerEventObject {
  newOwner: string
}
export type SetOwnerEvent = TypedEvent<[string], SetOwnerEventObject>

export type SetOwnerEventFilter = TypedEventFilter<SetOwnerEvent>

export interface TransferNoteEventObject {
  note: string
}
export type TransferNoteEvent = TypedEvent<[string], TransferNoteEventObject>

export type TransferNoteEventFilter = TypedEventFilter<TransferNoteEvent>

export interface UpdateIAMEventObject {
  newIAM: string
}
export type UpdateIAMEvent = TypedEvent<[string], UpdateIAMEventObject>

export type UpdateIAMEventFilter = TypedEventFilter<UpdateIAMEvent>

export interface UpdateMinPairEventObject {
  id: BigNumber
  min: BigNumber
}
export type UpdateMinPairEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdateMinPairEventObject
>

export type UpdateMinPairEventFilter = TypedEventFilter<UpdateMinPairEvent>

export interface UpdateOpenMpcEventObject {
  status: boolean
}
export type UpdateOpenMpcEvent = TypedEvent<[boolean], UpdateOpenMpcEventObject>

export type UpdateOpenMpcEventFilter = TypedEventFilter<UpdateOpenMpcEvent>

export interface UpdatePairEventObject {
  id: BigNumber
  status: boolean
}
export type UpdatePairEvent = TypedEvent<
  [BigNumber, boolean],
  UpdatePairEventObject
>

export type UpdatePairEventFilter = TypedEventFilter<UpdatePairEvent>

export interface UpdateSignerEventObject {
  signer: string
  status: boolean
}
export type UpdateSignerEvent = TypedEvent<
  [string, boolean],
  UpdateSignerEventObject
>

export type UpdateSignerEventFilter = TypedEventFilter<UpdateSignerEvent>

export interface BridgeConverter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: BridgeConverterInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    addOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    burn(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    convertDOO(
      _pairId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    convertFrom(
      _pairId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    createPair(
      _srcToken: PromiseOrValue<string>,
      _dstToken: PromiseOrValue<string>,
      _min: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    currentBridgeId(overrides?: CallOverrides): Promise<[BigNumber]>

    currentReleasedId(overrides?: CallOverrides): Promise<[BigNumber]>

    dstTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    existsPairIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getBridge(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[MPCBridgeConverter.BridgeDataStructOutput]>

    getPairByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[MPCBridgeConverter.BridgePairStructOutput]>

    getPairId(
      _srcToken: PromiseOrValue<string>,
      _dstToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    iam(overrides?: CallOverrides): Promise<[string]>

    initialize(
      _iam: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    isOpenMpc(overrides?: CallOverrides): Promise<[boolean]>

    isOwner(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    isReleased(
      _hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    isValidPair(
      _srcToken: PromiseOrValue<string>,
      _dstToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    masterOwner(overrides?: CallOverrides): Promise<[string]>

    mpcRelease(
      _user: PromiseOrValue<string>,
      _srcToken: PromiseOrValue<string>,
      _dstToken: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _convertedHash: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    ownerByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>

    pairs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber, boolean] & {
        srcToken: string
        dstToken: string
        min: BigNumber
        status: boolean
      }
    >

    releasedHashs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    removeOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    renounceMasterOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    safu(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    safuNative(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    srcTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    totalOwner(overrides?: CallOverrides): Promise<[BigNumber]>

    totalPairs(overrides?: CallOverrides): Promise<[BigNumber]>

    transferMasterOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    updateDstToken(
      _token: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    updateIAM(
      _newIAM: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    updateMinPair(
      _pairId: PromiseOrValue<BigNumberish>,
      _min: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    updatePair(
      _pairId: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    updateSrcToken(
      _token: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    updateStatusOpenMPC(
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>
  }

  addOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  burn(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  convertDOO(
    _pairId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  convertFrom(
    _pairId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  createPair(
    _srcToken: PromiseOrValue<string>,
    _dstToken: PromiseOrValue<string>,
    _min: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  currentBridgeId(overrides?: CallOverrides): Promise<BigNumber>

  currentReleasedId(overrides?: CallOverrides): Promise<BigNumber>

  dstTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>

  existsPairIds(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getBridge(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<MPCBridgeConverter.BridgeDataStructOutput>

  getPairByIndex(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<MPCBridgeConverter.BridgePairStructOutput>

  getPairId(
    _srcToken: PromiseOrValue<string>,
    _dstToken: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  iam(overrides?: CallOverrides): Promise<string>

  initialize(
    _iam: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  isOpenMpc(overrides?: CallOverrides): Promise<boolean>

  isOwner(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>

  isReleased(
    _hash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<boolean>

  isValidPair(
    _srcToken: PromiseOrValue<string>,
    _dstToken: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>

  masterOwner(overrides?: CallOverrides): Promise<string>

  mpcRelease(
    _user: PromiseOrValue<string>,
    _srcToken: PromiseOrValue<string>,
    _dstToken: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    _convertedHash: PromiseOrValue<BytesLike>,
    _amount: PromiseOrValue<BigNumberish>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  ownerByIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>

  pairs(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, BigNumber, boolean] & {
      srcToken: string
      dstToken: string
      min: BigNumber
      status: boolean
    }
  >

  releasedHashs(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<boolean>

  removeOwner(
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  renounceMasterOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  safu(
    _token: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  safuNative(
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  srcTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>

  totalOwner(overrides?: CallOverrides): Promise<BigNumber>

  totalPairs(overrides?: CallOverrides): Promise<BigNumber>

  transferMasterOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  updateDstToken(
    _token: PromiseOrValue<string>,
    _status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  updateIAM(
    _newIAM: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  updateMinPair(
    _pairId: PromiseOrValue<BigNumberish>,
    _min: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  updatePair(
    _pairId: PromiseOrValue<BigNumberish>,
    _status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  updateSrcToken(
    _token: PromiseOrValue<string>,
    _status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  updateStatusOpenMPC(
    _status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  callStatic: {
    addOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    burn(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    convertDOO(
      _pairId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    convertFrom(
      _pairId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    createPair(
      _srcToken: PromiseOrValue<string>,
      _dstToken: PromiseOrValue<string>,
      _min: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    currentBridgeId(overrides?: CallOverrides): Promise<BigNumber>

    currentReleasedId(overrides?: CallOverrides): Promise<BigNumber>

    dstTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    existsPairIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getBridge(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<MPCBridgeConverter.BridgeDataStructOutput>

    getPairByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<MPCBridgeConverter.BridgePairStructOutput>

    getPairId(
      _srcToken: PromiseOrValue<string>,
      _dstToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    iam(overrides?: CallOverrides): Promise<string>

    initialize(
      _iam: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    isOpenMpc(overrides?: CallOverrides): Promise<boolean>

    isOwner(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    isReleased(
      _hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    isValidPair(
      _srcToken: PromiseOrValue<string>,
      _dstToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    masterOwner(overrides?: CallOverrides): Promise<string>

    mpcRelease(
      _user: PromiseOrValue<string>,
      _srcToken: PromiseOrValue<string>,
      _dstToken: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _convertedHash: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>

    ownerByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>

    pairs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber, boolean] & {
        srcToken: string
        dstToken: string
        min: BigNumber
        status: boolean
      }
    >

    releasedHashs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    removeOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    renounceMasterOwnership(overrides?: CallOverrides): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    safu(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    safuNative(
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    srcTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    totalOwner(overrides?: CallOverrides): Promise<BigNumber>

    totalPairs(overrides?: CallOverrides): Promise<BigNumber>

    transferMasterOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    updateDstToken(
      _token: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>

    updateIAM(
      _newIAM: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    updateMinPair(
      _pairId: PromiseOrValue<BigNumberish>,
      _min: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    updatePair(
      _pairId: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>

    updateSrcToken(
      _token: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>

    updateStatusOpenMPC(
      _status: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>
  }

  filters: {
    'Converter(address,uint256,uint256,bytes32)'(
      user?: PromiseOrValue<string> | null,
      id?: null,
      amount?: null,
      hash?: null,
    ): ConverterEventFilter
    Converter(
      user?: PromiseOrValue<string> | null,
      id?: null,
      amount?: null,
      hash?: null,
    ): ConverterEventFilter

    'CreatePair(address,address)'(
      src?: PromiseOrValue<string> | null,
      dst?: PromiseOrValue<string> | null,
    ): CreatePairEventFilter
    CreatePair(
      src?: PromiseOrValue<string> | null,
      dst?: PromiseOrValue<string> | null,
    ): CreatePairEventFilter

    'Initialized(uint8)'(version?: null): InitializedEventFilter
    Initialized(version?: null): InitializedEventFilter

    'MPCRelease(address,uint256,bytes32)'(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      hash?: null,
    ): MPCReleaseEventFilter
    MPCRelease(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      hash?: null,
    ): MPCReleaseEventFilter

    'MasterOwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): MasterOwnershipTransferredEventFilter
    MasterOwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): MasterOwnershipTransferredEventFilter

    'RenounceMasterOwnership(address)'(
      owner?: PromiseOrValue<string> | null,
    ): RenounceMasterOwnershipEventFilter
    RenounceMasterOwnership(
      owner?: PromiseOrValue<string> | null,
    ): RenounceMasterOwnershipEventFilter

    'RenounceOwnership(address)'(
      owner?: PromiseOrValue<string> | null,
    ): RenounceOwnershipEventFilter
    RenounceOwnership(
      owner?: PromiseOrValue<string> | null,
    ): RenounceOwnershipEventFilter

    'RevokeOwner(address)'(
      owner?: PromiseOrValue<string> | null,
    ): RevokeOwnerEventFilter
    RevokeOwner(owner?: PromiseOrValue<string> | null): RevokeOwnerEventFilter

    'Safu(address,address,uint256)'(
      token?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      amount?: null,
    ): SafuEventFilter
    Safu(
      token?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      amount?: null,
    ): SafuEventFilter

    'SafuNative(address,uint256)'(
      user?: PromiseOrValue<string> | null,
      amount?: null,
    ): SafuNativeEventFilter
    SafuNative(
      user?: PromiseOrValue<string> | null,
      amount?: null,
    ): SafuNativeEventFilter

    'SetOwner(address)'(
      newOwner?: PromiseOrValue<string> | null,
    ): SetOwnerEventFilter
    SetOwner(newOwner?: PromiseOrValue<string> | null): SetOwnerEventFilter

    'TransferNote(string)'(note?: null): TransferNoteEventFilter
    TransferNote(note?: null): TransferNoteEventFilter

    'UpdateIAM(address)'(newIAM?: null): UpdateIAMEventFilter
    UpdateIAM(newIAM?: null): UpdateIAMEventFilter

    'UpdateMinPair(uint256,uint256)'(
      id?: PromiseOrValue<BigNumberish> | null,
      min?: null,
    ): UpdateMinPairEventFilter
    UpdateMinPair(
      id?: PromiseOrValue<BigNumberish> | null,
      min?: null,
    ): UpdateMinPairEventFilter

    'UpdateOpenMpc(bool)'(status?: null): UpdateOpenMpcEventFilter
    UpdateOpenMpc(status?: null): UpdateOpenMpcEventFilter

    'UpdatePair(uint256,bool)'(
      id?: PromiseOrValue<BigNumberish> | null,
      status?: null,
    ): UpdatePairEventFilter
    UpdatePair(
      id?: PromiseOrValue<BigNumberish> | null,
      status?: null,
    ): UpdatePairEventFilter

    'UpdateSigner(address,bool)'(
      signer?: PromiseOrValue<string> | null,
      status?: null,
    ): UpdateSignerEventFilter
    UpdateSigner(
      signer?: PromiseOrValue<string> | null,
      status?: null,
    ): UpdateSignerEventFilter
  }

  estimateGas: {
    addOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    burn(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    convertDOO(
      _pairId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    convertFrom(
      _pairId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    createPair(
      _srcToken: PromiseOrValue<string>,
      _dstToken: PromiseOrValue<string>,
      _min: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    currentBridgeId(overrides?: CallOverrides): Promise<BigNumber>

    currentReleasedId(overrides?: CallOverrides): Promise<BigNumber>

    dstTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    existsPairIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getBridge(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getPairByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getPairId(
      _srcToken: PromiseOrValue<string>,
      _dstToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    iam(overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      _iam: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    isOpenMpc(overrides?: CallOverrides): Promise<BigNumber>

    isOwner(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    isReleased(
      _hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    isValidPair(
      _srcToken: PromiseOrValue<string>,
      _dstToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    masterOwner(overrides?: CallOverrides): Promise<BigNumber>

    mpcRelease(
      _user: PromiseOrValue<string>,
      _srcToken: PromiseOrValue<string>,
      _dstToken: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _convertedHash: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    ownerByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    pairs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    releasedHashs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    removeOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    renounceMasterOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    safu(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    safuNative(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    srcTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    totalOwner(overrides?: CallOverrides): Promise<BigNumber>

    totalPairs(overrides?: CallOverrides): Promise<BigNumber>

    transferMasterOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    updateDstToken(
      _token: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    updateIAM(
      _newIAM: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    updateMinPair(
      _pairId: PromiseOrValue<BigNumberish>,
      _min: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    updatePair(
      _pairId: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    updateSrcToken(
      _token: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    updateStatusOpenMPC(
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    addOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    burn(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    convertDOO(
      _pairId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    convertFrom(
      _pairId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    createPair(
      _srcToken: PromiseOrValue<string>,
      _dstToken: PromiseOrValue<string>,
      _min: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    currentBridgeId(overrides?: CallOverrides): Promise<PopulatedTransaction>

    currentReleasedId(overrides?: CallOverrides): Promise<PopulatedTransaction>

    dstTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    existsPairIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getBridge(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getPairByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getPairId(
      _srcToken: PromiseOrValue<string>,
      _dstToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    iam(overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialize(
      _iam: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    isOpenMpc(overrides?: CallOverrides): Promise<PopulatedTransaction>

    isOwner(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    isReleased(
      _hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    isValidPair(
      _srcToken: PromiseOrValue<string>,
      _dstToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    masterOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    mpcRelease(
      _user: PromiseOrValue<string>,
      _srcToken: PromiseOrValue<string>,
      _dstToken: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _convertedHash: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    ownerByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    pairs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    releasedHashs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    removeOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    renounceMasterOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    safu(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    safuNative(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    srcTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    totalOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalPairs(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferMasterOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    updateDstToken(
      _token: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    updateIAM(
      _newIAM: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    updateMinPair(
      _pairId: PromiseOrValue<BigNumberish>,
      _min: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    updatePair(
      _pairId: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    updateSrcToken(
      _token: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    updateStatusOpenMPC(
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>
  }
}
